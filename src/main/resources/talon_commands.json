[
    {
        "file": "code/keys.py",
        "context": "user.letter",
        "commands": {
            "air": "a",
            "bat": "b",
            "cap": "c",
            "drum": "d",
            "each": "e",
            "fine": "f",
            "gust": "g",
            "harp": "h",
            "sit": "i",
            "jury": "j",
            "crunch": "k",
            "look": "l",
            "made": "m",
            "near": "n",
            "odd": "o",
            "pit": "p",
            "quench": "q",
            "red": "r",
            "sun": "s",
            "trap": "t",
            "urge": "u",
            "vest": "v",
            "whale": "w",
            "plex": "x",
            "yank": "y",
            "zip": "z"
        }
    },
    {
        "file": "code/keys.py",
        "context": "user.number_key",
        "commands": {
            "zero": "0",
            "one": "1",
            "two": "2",
            "three": "3",
            "four": "4",
            "five": "5",
            "six": "6",
            "seven": "7",
            "eight": "8",
            "nine": "9"
        }
    },
    {
        "file": "code/keys.py",
        "context": "user.modifier_key",
        "commands": {
            "alt": "alt",
            "control": "ctrl",
            "shift": "shift",
            "super": "super",
            "command": "cmd",
            "option": "alt"
        }
    },
    {
        "file": "code/keys.py",
        "context": "user.special_key",
        "commands": {
            "end": "end",
            "enter": "enter",
            "escape": "escape",
            "home": "home",
            "insert": "insert",
            "pagedown": "pagedown",
            "pageup": "pageup",
            "space": "space",
            "tab": "tab",
            "delete": "backspace",
            "forward delete": "delete",
            "page up": "pageup",
            "page down": "pagedown"
        }
    },
    {
        "file": "code/keys.py",
        "context": "user.symbol_key",
        "commands": {
            "dot": ".",
            "point": ".",
            "quote": "'",
            "apostrophe": "'",
            "L square": "[",
            "left square": "[",
            "square": "[",
            "R square": "]",
            "right square": "]",
            "slash": "/",
            "backslash": "\\",
            "minus": "-",
            "dash": "-",
            "equals": "=",
            "plus": "+",
            "tilde": "~",
            "bang": "!",
            "down score": "_",
            "under score": "_",
            "paren": "(",
            "L paren": "(",
            "left paren": "(",
            "R paren": ")",
            "right paren": ")",
            "brace": "{",
            "left brace": "{",
            "R brace": "}",
            "right brace": "}",
            "angle": "<",
            "left angle": "<",
            "less than": "<",
            "rangle": ">",
            "R angle": ">",
            "right angle": ">",
            "greater than": ">",
            "star": "*",
            "hash": "#",
            "percent": "%",
            "caret": "^",
            "amper": "&",
            "pipe": "|",
            "dubquote": "\"",
            "double quote": "\"",
            "dollar": "$",
            "pound": "\u00a3",
            "`": "`",
            ",": ",",
            "back tick": "`",
            "grave": "`",
            "comma": ",",
            "period": ".",
            "full stop": ".",
            "semicolon": ";",
            "colon": ":",
            "forward slash": "/",
            "question mark": "?",
            "exclamation mark": "!",
            "exclamation point": "!",
            "asterisk": "*",
            "hash sign": "#",
            "number sign": "#",
            "percent sign": "%",
            "at sign": "@",
            "and sign": "&",
            "ampersand": "&",
            "dollar sign": "$",
            "pound sign": "\u00a3"
        }
    },
    {
        "file": "code/keys.py",
        "context": "user.arrow_key",
        "commands": {
            "down": "down",
            "left": "left",
            "right": "right",
            "up": "up"
        }
    },
    {
        "file": "code/keys.py",
        "context": "user.punctuation",
        "commands": {
            "`": "`",
            ",": ",",
            "back tick": "`",
            "grave": "`",
            "comma": ",",
            "period": ".",
            "full stop": ".",
            "semicolon": ";",
            "colon": ":",
            "forward slash": "/",
            "question mark": "?",
            "exclamation mark": "!",
            "exclamation point": "!",
            "asterisk": "*",
            "hash sign": "#",
            "number sign": "#",
            "percent sign": "%",
            "at sign": "@",
            "and sign": "&",
            "ampersand": "&",
            "dollar sign": "$",
            "pound sign": "\u00a3"
        }
    },
    {
        "file": "code/keys.py",
        "context": "user.function_key",
        "commands": {
            "F one": "f1",
            "F two": "f2",
            "F three": "f3",
            "F four": "f4",
            "F five": "f5",
            "F six": "f6",
            "F seven": "f7",
            "F eight": "f8",
            "F nine": "f9",
            "F ten": "f10",
            "F eleven": "f11",
            "F twelve": "f12"
        }
    },
    {
        "file": "apps/1password/1password.talon",
        "context": "1password",
        "commands": {
            "password new": "user.password_new()",
            "password dup": "user.password_duplicate()",
            "password edit": "user.password_edit()",
            "password delete": "user.password_delete()"
        }
    },
    {
        "file": "apps/1password/1password_global.talon",
        "context": "1password global",
        "commands": {
            "password fill": "user.password_fill()",
            "password show": "user.password_show()"
        }
    },
    {
        "file": "apps/amethyst/amethyst.talon",
        "context": "amethyst",
        "commands": {
            "window next": "key(\"alt-shift-j\")",
            "window previous": "key(\"alt-shift-k\")",
            "window full": "key(\"alt-shift-d\")",
            "window tall": "key(\"alt-shift-a\")",
            "window middle": "key(\"alt-shift-`\")",
            "window move main": "key(\"alt-shift-enter\")",
            "window grow": "key(\"alt-shift-l\")",
            "window shrink": "key(\"alt-shift-h\")",
            "window reevaluate": "key(\"alt-shift-z\")"
        }
    },
    {
        "file": "apps/anaconda/anaconda.talon",
        "context": "anaconda",
        "commands": {
            "anaconda": "\"conda \"",
            "anaconda help": "\"conda --help\\n\"",
            "anaconda version": "\"conda --version\\n\"",
            "anaconda environment list": "\"conda env list\\n\"",
            "anaconda environment create": "\"conda env create -f \"",
            "anaconda environment remove": "\"conda env remove -n \"",
            "anaconda activate": "\"conda activate \"",
            "anaconda clean": "\"conda clean \"",
            "anaconda compare": "\"conda compare \"",
            "anaconda config": "\"conda config \"",
            "anaconda create": "\"conda create \"",
            "anaconda info": "\"conda info \"",
            "anaconda init": "\"conda init \"",
            "anaconda install": "\"conda install \"",
            "anaconda list": "\"conda list \"",
            "anaconda package": "\"conda package \"",
            "anaconda remove": "\"conda remove \"",
            "anaconda uninstall": "\"conda uninstall \"",
            "anaconda run": "\"conda run \"",
            "anaconda search": "\"conda search \"",
            "anaconda update": "\"conda update \"",
            "anaconda upgrade": "\"conda upgrade \"",
            "anaconda build": "\"conda build \"",
            "anaconda convert": "\"conda convert \"",
            "anaconda debug": "\"conda debug \"",
            "anaconda develop": "\"conda develop \"",
            "anaconda environment": "\"conda env \"",
            "anaconda index": "\"conda index \"",
            "anaconda inspect": "\"conda inspect \"",
            "anaconda metapackage": "\"conda metapackage \"",
            "anaconda render": "\"conda render \"",
            "anaconda server": "\"conda server \"",
            "anaconda skeleton": "\"conda skeleton \"",
            "anaconda verify": "\"conda verify \""
        }
    },
    {
        "file": "apps/discord/discord.talon",
        "context": "discord",
        "commands": {
            "[channel] mentions last": "user.discord_mentions_last()",
            "[channel] mentions next": "user.discord_mentions_next()",
            "oldest unread": "user.discord_oldest_unread()",
            "toggle pins": "user.discord_toggle_pins()",
            "toggle inbox": "user.discord_toggle_inbox()",
            "toggle (members | member list)": "user.discord_toggle_members()",
            "pick emoji": "user.discord_emoji_picker()",
            "pick (jif | gif | gift)": "user.discord_gif_picker()",
            "mark inbox channel read": "user.discord_mark_inbox_read()",
            "[toggle] (mute | unmute)": "user.discord_mute()",
            "[toggle] (deafen | undeafen)": "user.discord_deafen()",
            "answer call": "user.discord_answer_call()",
            "decline call": "user.discord_decline_call()"
        }
    },
    {
        "file": "apps/eclipse/eclipse.talon",
        "context": "eclipse",
        "commands": {
            "please [<user.text>]": "key(ctrl-3)\n\t\tinsert(user.text or \"\")\n\t\t\n\t\t# Sidebar",
            "bar explore": "key(alt-shift-w p)",
            "bar outline": "key(alt-shift-q o)",
            "panel output": "key(alt-shift-q)\n\t\tsleep(200ms)\n\t\tkey(c)",
            "panel problems": "key(alt-shift-q)\n\t\tsleep(200ms)\n\t\tkey(x)",
            "panel errors": "key(alt-shift-q)\n\t\tsleep(200ms)\n\t\tkey(l)",
            "panel breakpoints": "key(alt-shift-q)\n\t\tsleep(200ms)\n\t\tkey(b)",
            "panel search": "key(alt-shift-q)\n\t\tsleep(200ms)\n\t\tkey(s)",
            "panel variables": "key(alt-shift-q)\n\t\tsleep(200ms)\n\t\tkey(v)\n\t\t# panel switch:\n\t\t# panel terminal:\n\t\t\n\t\t# Settings",
            "show settings": "key(alt-w p)",
            "show shortcuts": "key(ctrl-shift-l)",
            "file hunt [<user.text>]": "key(ctrl-shift-r)\n\t\tsleep(50ms)\n\t\tinsert(text or \"\")\n\t\t# file copy path:\n\t\t# file create sibling:",
            "file create": "key(ctrl-n)",
            "file open folder": "key(alt-shift-w x)",
            "file rename": "key(alt-shift-w p enter f2)",
            "file reveal": "key(alt-shift-w p enter)",
            "imports fix": "key(ctrl-shift-o)",
            "refactor rename": "key(alt-shift-r)",
            "refactor this": "key(alt-shift-i)",
            "(go declaration | follow)": "key(f3)",
            "go back": "key(alt-left)",
            "go forward": "key(alt-right)",
            "go marks": "key(alt-end)",
            "toggle mark": "key(ctrl-alt-b down enter)",
            "go next mark": "key(alt-pagedown)",
            "go last mark": "key(alt-pageup)",
            "break point": "key(ctrl-shift-b)",
            "step over": "key(f6)",
            "debug step into": "key(f5)",
            "debug step out [of]": "key(f7)",
            "debug continue": "key(f8)",
            "copy line down": "key(ctrl-alt-down)",
            "copy line up": "key(ctrl-alt-up)"
        }
    },
    {
        "file": "apps/file_manager.talon",
        "context": "file manager",
        "commands": {
            "title force": "user.file_manager_refresh_title()",
            "manager show": "user.file_manager_toggle_pickers()",
            "manager close": "user.file_manager_hide_pickers()",
            "manager refresh": "user.file_manager_update_lists()",
            "go desk": "user.file_manager_open_user_directory(\"Desktop\")",
            "go docks": "user.file_manager_open_user_directory(\"Documents\")",
            "go downloads": "user.file_manager_open_user_directory(\"Downloads\")",
            "go pictures": "user.file_manager_open_user_directory(\"Pictures\")",
            "go profile": "user.file_manager_open_user_directory(\"\")",
            "go talon home": "user.file_manager_open_directory(path.talon_home())",
            "go talon user": "user.file_manager_open_directory(path.talon_user())",
            "go user": "user.file_manager_open_directory(path.user_home())",
            "go back": "user.file_manager_go_back()",
            "go forward": "user.file_manager_go_forward()",
            "(go parent | daddy)": "user.file_manager_open_parent()",
            "follow numb <number_small>": "directory = user.file_manager_get_directory_by_index(number_small - 1)\n\t\tuser.file_manager_open_directory(directory)",
            "follow {user.file_manager_directories}": "user.file_manager_open_directory(file_manager_directories)",
            "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
            "open <number_small>": "file = user.file_manager_get_file_by_index(number_small - 1)\n\t\tuser.file_manager_open_file(file)",
            "folder numb <number_small>": "directory = user.file_manager_get_directory_by_index(number_small - 1)\n\t\tuser.file_manager_select_directory(directory)",
            "file numb <number_small>": "file = user.file_manager_get_file_by_index(number_small - 1)\n\t\tuser.file_manager_select_file(file)",
            "file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)",
            "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)",
            "folder new <user.text>": "user.file_manager_new_folder(text)\n\t\t\n\t\t#show properties",
            "properties show": "user.file_manager_show_properties()",
            "terminal here": "user.file_manager_terminal_here()",
            "folder next": "user.file_manager_next_folder_page()",
            "folder last": "user.file_manager_previous_folder_page()",
            "file next": "user.file_manager_next_file_page()",
            "file last": "user.file_manager_previous_file_page()"
        }
    },
    {
        "file": "apps/firefox/firefox.talon",
        "context": "firefox",
        "commands": {
            "tab search": "browser.focus_address()\n\t\tinsert(\"% \")",
            "tab search <user.text>": "browser.focus_address()\n\t\tinsert(\"% {text}\")\n\t\tkey(down)\n\t\t"
        }
    },
    {
        "file": "apps/gdb/gdb.talon",
        "context": "gdb",
        "commands": {
            "until <number>": "\"until {number}\"",
            "force clear all break points": "insert(\"d br\\n\")\n\t\tinsert(\"y\\n\")",
            "break [on] clipboard": "insert(\"break \")\n\t\tkey(ctrl-shift-v)\n\t\tkey(enter)\n\t\t\n\t\t# information",
            "list [source]": "\"list\\n\"",
            "info source": "\"info source\\n\"",
            "print": "\"p \"",
            "print [variable] <user.text>": "\"p {text}\"",
            "print hex": "\"p/x \"",
            "print hex [variable] <user.text>": "\"p/x {text}\"",
            "print string": "\"p/s \"",
            "hex dump <number> bytes": "\"x/{number}bx \"",
            "hex dump <number> (half|short) words": "\"x/{number}hx \"",
            "hex dump <number> (d|long) words": "\"x/{number}dx \"",
            "hex dump <number> quad words": "\"x/{number}gx \"",
            "hex dump": "\"x/100gx \"",
            "hex dump highlighted": "insert(\"x/100gx \")\n\t\tedit.copy()\n\t\tedit.paste()\n\t\tkey(enter)",
            "hex dump clipboard": "insert(\"x/100gx \")\n\t\tedit.paste()\n\t\tkey(enter)\n\t\t\n\t\t\n\t\t# execution",
            "source": "\"source \\t\\t\"",
            "(list|show|info) display": "\"info display\\n\"",
            "display assembly line": "\"display /i $pc\\n\"",
            "display source": "\"display \"",
            "enable display <number_small>": "\"enable display {number_small}\\n\"",
            "disable display <number_small>": "\"disable display {number_small}\\n\"",
            "undisplay": "\"undisplay\\n\"",
            "(list|show|info) local": "\"info local \"",
            "(list|show|info) local typed": "\"info local -t \"",
            "(list|show|info) variable": "\"info variable \"",
            "(list|show|info) variable typed": "\"info variable -t \"",
            "(list|show|info) locals": "\"info local\\n\"",
            "(list|show|info) variables": "\"info variables\\n\"",
            "info threads": "\"info threads\\n\"",
            "restart [program]": "\"r\\n\"",
            "continue": "\"c\\n\"",
            "back trace": "\"bt\\n\"",
            "debug quit": "\"quit\\n\"",
            "debug force quit": "\"quit\\ny\\n\"",
            "(show|info) (inf|inferiors)": "\"info inferiors\\n\"",
            "inferior <number_small>": "\"inferior {number_small}\\n\"",
            "inferior": "\"inferior \"",
            "resume main (inf|inferior)": "insert(\"inferior 1\\n\")\n\t\tinsert(\"c\\n\")",
            "resume [from] (inf|inferior) <number_small>": "insert(\"inferior {number_small}\\n\")\n\t\tinsert(\"c\\n\")\n\t\t\n\t\t# arguments",
            "set args": "\"set args \"",
            "show follow (fork|forks) [mode]": "\"show follow-fork-mode\\n\"",
            "[set] follow (fork|forks) [mode] child": "\"set follow-fork-mode child\\n\"",
            "[set] follow (fork|forks) [mode] parent": "\"set follow-fork-mode parent\\n\"",
            "show detach on fork": "\"show detach-on-fork\\n\"",
            "set detach on fork": "\"set detach-on-fork on\\n\"",
            "unset detach on fork": "\"set detach-on-fork off\\n\"",
            "show list size": "\"show listsize\\n\"",
            "set list size <number_small>": "\"set listsize {number_small}\\n\"",
            "clear screen": "\"shell clear\\n\""
        }
    },
    {
        "file": "apps/generic_browser.talon",
        "context": "generic browser",
        "commands": {
            "address bar | go address | go url": "browser.focus_address()",
            "address copy | url copy | copy address | copy url": "browser.focus_address()\n\t\tsleep(50ms)\n\t\tedit.copy()",
            "go home": "browser.go_home()",
            "[go] forward": "browser.go_forward()",
            "go (back | backward)": "browser.go_back()",
            "go to {user.website}": "browser.go(website)",
            "go private": "browser.open_private_window()",
            "bookmark it": "browser.bookmark()",
            "bookmark tabs": "browser.bookmark_tabs()",
            "(refresh | reload) it": "browser.reload()",
            "(refresh | reload) it hard": "browser.reload_hard()",
            "bookmark show": "browser.bookmarks()",
            "bookmark bar [show]": "browser.bookmarks_bar()",
            "downloads show": "browser.show_downloads()",
            "extensions show": "browser.show_extensions()",
            "history show": "browser.show_history()",
            "cache show": "browser.show_clear_cache()",
            "dev tools [show]": "browser.toggle_dev_tools()",
            "show downloads": "browser.show_downloads()",
            "show extensions": "browser.show_extensions()",
            "show history": "browser.show_history()",
            "show cache": "browser.show_clear_cache()"
        }
    },
    {
        "file": "apps/generic_debugger.talon",
        "context": "generic debugger",
        "commands": {
            "step into": "user.debugger_step_into()",
            "step over": "user.debugger_step_over()",
            "step line": "user.debugger_step_line()",
            "step over line": "user.debugger_step_over_line()",
            "step out": "user.debugger_step_out()",
            "continue": "user.debugger_continue()",
            "debug start": "user.debugger_start()",
            "debug stop": "user.debugger_stop()",
            "debug exit": "user.debugger_exit()",
            "debug detach": "user.debugger_detach()",
            "debug restart": "user.debugger_restart()",
            "show registers": "user.debugger_show_registers()",
            "get register": "user.debugger_get_register()",
            "set register": "user.debugger_set_register()",
            "break now": "user.debugger_break_now()",
            "break here": "user.debugger_break_here()",
            "(list|show) (breaks|break points)": "user.debugger_show_breakpoints()",
            "(set|add) (break|break point)": "user.debugger_add_sw_breakpoint()",
            "(set|add) hardware (break|break point)": "user.debugger_add_hw_breakpoint()",
            "clear all (breaks|break points)": "user.debugger_clear_all_breakpoints()",
            "clear (break|break point)": "user.debugger_clear_breakpoint()",
            "clear (break|break point) <number_small>": "user.debugger_clear_breakpoint_id(number_small)",
            "disable all (breaks|break points)": "user.debugger_disable_all_breakpoints()",
            "disable (break|break point)": "user.debugger_disable_breakpoint()",
            "disable (break|break point) <number_small>": "user.debugger_disable_breakpoint_id(number_small)",
            "enable all (breaks|break points)": "user.debugger_enable_all_breakpoints()",
            "enable (break|break point)": "user.debugger_enable_breakpoint()",
            "enable (break|break point) <number_small>": "user.debugger_enable_breakpoint_id(number_small)\n\t\t\n\t\t# Navigation\n\t\t\n\t\t\n\t\t# Memory Inspection",
            "(stack|back) trace": "user.debugger_backtrace()",
            "disassemble": "user.debugger_disassemble()",
            "disassemble here": "user.debugger_disassemble_here()",
            "disassemble clipboard": "user.debugger_disassemble_clipboard()",
            "jump to address": "user.debugger_goto_address()",
            "jump to clipboard": "user.debugger_goto_clipboard()",
            "jump to highlighted": "user.debugger_goto_highlighted()",
            "dump string": "user.debugger_dump_ascii_string()",
            "dump unicode [string]": "user.debugger_dump_unicode_string()",
            "dump pointers": "user.debugger_dump_pointers()",
            "list modules": "user.debugger_list_modules()",
            "inspect type": "user.debugger_inspect_type()",
            "clear line": "user.debugger_clear_line()"
        }
    },
    {
        "file": "apps/generic_snippets/generic_snippets.talon",
        "context": "generic snippets",
        "commands": {
            "snip {user.snippets}": "user.snippet_insert(user.snippets)",
            "snip hunt <user.text>": "user.snippet_search(user.text)",
            "snip hunt": "user.snippet_search(\"\")",
            "snip create": "user.snippet_create()",
            "snip show": "user.snippet_toggle()"
        }
    },
    {
        "file": "apps/generic_snippets/generic_snippets_open.talon",
        "context": "generic snippets open",
        "commands": {
            "snip close": "user.snippet_hide()"
        }
    },
    {
        "file": "apps/generic_terminal/generic_terminal.talon",
        "context": "generic terminal",
        "commands": {
            "lisa": "user.terminal_list_directories()",
            "lisa all": "user.terminal_list_all_directories()",
            "katie [<user.text>]": "user.terminal_change_directory(text or \"\")",
            "katie root": "user.terminal_change_directory_root()",
            "clear screen": "user.terminal_clear_screen()",
            "run last": "user.terminal_run_last()",
            "rerun [<user.text>]": "user.terminal_rerun_search(text or \"\")",
            "rerun search": "user.terminal_rerun_search(\"\")",
            "kill all": "user.terminal_kill_all()",
            "copy paste": "edit.copy()\n\t\tsleep(50ms)\n\t\tedit.paste()"
        }
    },
    {
        "file": "apps/i3wm/i3wm.talon",
        "context": "i3wm",
        "commands": {
            "port <number_small>": "user.system_command(\"i3-msg workspace {number_small}\")",
            "port ten": "user.system_command(\"i3-msg workspace 10\")",
            "(port flip|flipper)": "user.system_command(\"i3-msg workspace back_and_forth\")",
            "port right": "user.system_command(\"i3-msg workspace next\")",
            "port left": "user.system_command(\"i3-msg workspace prev\")",
            "(win|window) left": "user.system_command(\"i3-msg focus left\")",
            "(win|window) right": "user.system_command(\"i3-msg focus right\")",
            "(win|window) up": "user.system_command(\"i3-msg focus up\")",
            "(win|window) down": "user.system_command(\"i3-msg focus down\")",
            "((win|window) kill|murder)": "user.system_command(\"i3-msg kill\")",
            "(win|window) stacking": "user.system_command(\"i3-msg layout stacking\")",
            "(win|window) default": "user.system_command(\"i3-msg layout toggle split\")",
            "(win|window) tabbed": "user.system_command(\"i3-msg layout tabbed\")",
            "reload i three config": "user.system_command(\"i3-msg reload\")",
            "restart i three": "user.system_command(\"i3-msg restart\")",
            "(full screen|scuba)": "user.system_command(\"i3-msg fullscreen\")",
            "toggle floating": "user.system_command(\"i3-msg floating toggle\")",
            "focus floating": "user.system_command(\"i3-msg focus mode_toggle\")",
            "center window": "user.system_command(\"i3-msg move position center\")",
            "resize mode": "user.system_command('i3-msg mode \"resize\"')",
            "focus parent": "user.system_command(\"i3-msg focus parent\")",
            "focus child": "user.system_command(\"i3-msg focus child\")",
            "grow window": "user.system_command('i3-msg mode \"resize\"')\n\t\tkey(right:10)\n\t\tkey(down:10)\n\t\t# escape resize mode\n\t\tkey(escape)\n\t\t# center window\n\t\tsleep(200ms)\n\t\tuser.system_command(\"i3-msg move position center\")\n\t\t\n\t\t\n\t\t# resize helpers",
            "shrink window": "user.system_command('i3-msg mode \"resize\"')\n\t\tkey(left:10)\n\t\tkey(up:10)\n\t\t# escape resize mode\n\t\tkey(escape)\n\t\t# center window\n\t\tsleep(200ms)\n\t\tuser.system_command(\"i3-msg move position center\")\n\t\t",
            "horizontal (shell|terminal)": "user.system_command(\"i3-msg split h\")\n\t\tuser.i3wm_shell()\n\t\t",
            "vertical (shell|terminal)": "user.system_command(\"i3-msg split v\")\n\t\tuser.i3wm_shell()\n\t\t\n\t\t# XXX - just replace with shuffle eventually?\n\t\t# XXX - like also need to match the generic talon commands",
            "(shuffle|move (win|window) [to] port) <number_small>": "user.system_command(\"i3-msg move container to workspace {number_small}\")",
            "(shuffle|move (win|window) [to] port ten)": "user.system_command(\"i3-msg move container to workspace 10\")",
            "(shuffle|move (win|window) [to] last port)": "user.system_command(\"i3-msg move container to workspace back_and_forth\")",
            "(shuffle|move (win|window) left)": "user.system_command(\"i3-msg move left\")",
            "(shuffle|move (win|window) right)": "user.system_command(\"i3-msg move right\")",
            "(shuffle|move (win|window) up)": "user.system_command(\"i3-msg move up\")",
            "(shuffle|move (win|window) down)": "user.system_command(\"i3-msg move down\")",
            "(win|window) horizontal": "user.system_command(\"i3-msg split h\")",
            "(win|window) vertical": "user.system_command(\"i3-msg split v\")",
            "make scratch": "user.system_command(\"i3-msg move scratchpad\")",
            "[(show|hide)] scratch": "user.system_command(\"i3-msg scratchpad show\")",
            "next scratch": "user.system_command(\"i3-msg scratchpad show\")\n\t\tuser.system_command(\"i3-msg scratchpad show\")\n\t\t\n\t\t# these rely on the user settings for the mod key. see i3wm.py Actions class",
            "launch": "user.i3wm_launch()",
            "launch <user.text>": "user.i3wm_launch()\n\t\tsleep(100ms)\n\t\tinsert(\"{text}\")",
            "lock screen": "user.i3wm_launch()",
            "(launch shell|koopa)": "user.i3wm_shell()",
            "new scratch (shell|window)": "user.i3wm_shell()\n\t\tsleep(200ms)\n\t\tuser.system_command(\"i3-msg move scratchpad\")\n\t\tuser.system_command(\"i3-msg scratchpad show\")"
        }
    },
    {
        "file": "apps/jetbrains/jetbrains.talon",
        "context": "jetbrains",
        "commands": {
            "complete": "user.idea(\"action CodeCompletion\")",
            "perfect": "user.idea(\"action CodeCompletion,action CodeCompletion\")",
            "smart": "user.idea(\"action SmartTypeCompletion\")",
            "(done | finish)": "user.idea(\"action EditorCompleteStatement\")",
            "grab <number>": "user.idea_grab(number)",
            "(action | please)": "user.idea(\"action GotoAction\")",
            "(action | please) <user.text>": "user.idea(\"action GotoAction\")\n\t\tinsert(text)\n\t\t# Refactoring",
            "refactor": "user.idea(\"action Refactorings.QuickListPopupAction\")",
            "refactor <user.text>": "user.idea(\"action Refactorings.QuickListPopupAction\")\n\t\tinsert(text)",
            "extract variable": "user.idea(\"action IntroduceVariable\")",
            "extract field": "user.idea(\"action IntroduceField\")",
            "extract constant": "user.idea(\"action IntroduceConstant\")",
            "extract parameter": "user.idea(\"action IntroduceParameter\")",
            "extract interface": "user.idea(\"action ExtractInterface\")",
            "extract method": "user.idea(\"action ExtractMethod\")",
            "refactor in line": "user.idea(\"action Inline\")",
            "refactor move": "user.idea(\"action Move\")",
            "refactor rename": "user.idea(\"action RenameElement\")",
            "rename file": "user.idea(\"action RenameFile\")",
            "fix (format | formatting)": "user.idea(\"action ReformatCode\")",
            "fix imports": "user.idea(\"action OptimizeImports\")",
            "(go declaration | follow)": "user.idea(\"action GotoDeclaration\")",
            "go implementation": "user.idea(\"action GotoImplementation\")",
            "go usage": "user.idea(\"action FindUsages\")",
            "go type": "user.idea(\"action GotoTypeDeclaration\")",
            "go test": "user.idea(\"action GotoTest\")",
            "go back": "user.idea(\"action Back\")",
            "go forward": "user.idea(\"action Forward\")",
            "find (everywhere | all)": "user.idea(\"action SearchEverywhere\")",
            "find (everywhere | all) <user.text> [over]": "user.idea(\"action SearchEverywhere\")\n\t\tsleep(500ms)\n\t\tinsert(text)",
            "(search | find) class": "user.idea(\"action GotoClass\")",
            "(search | find) file": "user.idea(\"action GotoFile\")",
            "(search | find) path": "user.idea(\"action FindInPath\")",
            "(search | find) symbol": "user.idea(\"action GotoSymbol\")",
            "(search | find) symbol <user.text>": "user.idea(\"action GotoSymbol\")\n\t\tinsert(text)\n\t\tkey(\"enter\")",
            "recent": "user.idea(\"action RecentFiles\")",
            "surround [this] with <user.text> [over]": "idea(\"action SurroundWith\")\n\t\tsleep(500ms)\n\t\tinsert(text)\n\t\t# Making these longer to reduce collisions with real code dictation.",
            "insert generated <user.text> [over]": "user.idea(\"action Generate\")\n\t\tsleep(500ms)\n\t\tinsert(text)",
            "insert template <user.text> [over]": "idea(\"action InsertLiveTemplate\")\n\t\tsleep(500ms)\n\t\tinsert(text)",
            "create (template|snippet)": "user.idea(\"action SaveAsTemplate\")",
            "toggle recording": "user.idea(\"action StartStopMacroRecording\")",
            "change (recording | recordings)": "user.idea(\"action EditMacros\")",
            "play recording": "user.idea(\"action PlaybackLastMacro\")",
            "play recording <user.text> [over]": "idea(\"action PlaySavedMacrosAction\")\n\t\tinsert(text)\n\t\tsleep(500ms)\n\t\tKey(\"enter\")\n\t\t# Marks",
            "go mark": "user.idea(\"action ShowBookmarks\")",
            "toggle mark": "user.idea(\"action ToggleBookmark\")",
            "go next mark": "user.idea(\"action GotoNextBookmark\")",
            "go last mark": "user.idea(\"action GotoPreviousBookmark\")",
            "toggle mark <number>": "user.idea(\"action ToggleBookmark{number}\")",
            "go mark <number>": "user.idea(\"action GotoBookmark{number}\")",
            "expand deep": "user.idea(\"action ExpandRegionRecursively\")",
            "expand all": "user.idea(\"action ExpandAllRegions\")",
            "collapse deep": "user.idea(\"action CollapseRegionRecursively\")",
            "collapse all": "user.idea(\"action CollapseAllRegions\")",
            "go next (method | function)": "user.idea(\"action MethodDown\")",
            "go last (method | function)": "user.idea(\"action MethodUp\")",
            "clippings": "user.idea(\"action PasteMultiple\")",
            "copy path": "user.idea(\"action CopyPaths\")",
            "copy reference": "user.idea(\"action CopyReference\")",
            "copy pretty": "user.idea(\"action CopyAsRichText\")",
            "create sibling": "user.idea(\"action NewElementSamePlace\")",
            "create sibling <user.text> [over]": "user.idea(\"action NewElementSamePlace\")\n\t\tsleep(500ms)\n\t\tinsert(text)",
            "create file": "user.idea(\"action NewElement\")",
            "create file <user.text> [over]": "user.idea(\"action NewElement\")\n\t\tsleep(500ms)\n\t\tinsert(text)\n\t\t# Task Management",
            "go task": "user.idea(\"action tasks.goto\")",
            "go browser task": "user.idea(\"action tasks.open.in.browser\")",
            "switch task": "user.idea(\"action tasks.switch\")",
            "clear task": "user.idea(\"action tasks.close\")",
            "configure servers": "user.idea(\"action tasks.configure.servers\")",
            "git pull": "user.idea(\"action Vcs.UpdateProject\")",
            "git commit": "user.idea(\"action CheckinProject\")",
            "git push": "user.idea(\"action CheckinProject\")",
            "git log": "user.idea(\"action Vcs.ShowTabbedFileHistory\")",
            "git browse": "user.idea(\"action Github.Open.In.Browser\")",
            "git (gets | gist)": "user.idea(\"action Github.Create.Gist\")",
            "git (pull request | request)": "user.idea(\"action Github.Create.Pull.Request\")",
            "git (view | show | list) (requests | request)": "user.idea(\"action Github.View.Pull.Request\")",
            "git (annotate | blame)": "user.idea(\"action Annotate\")",
            "git menu": "user.idea(\"action Vcs.QuickListPopupAction\")",
            "toggle project": "user.idea(\"action ActivateProjectToolWindow\")",
            "toggle find": "user.idea(\"action ActivateFindToolWindow\")",
            "toggle run": "user.idea(\"action ActivateRunToolWindow\")",
            "toggle debug": "user.idea(\"action ActivateDebugToolWindow\")",
            "toggle events": "user.idea(\"action ActivateEventLogToolWindow\")",
            "toggle terminal": "user.idea(\"action ActivateTerminalToolWindow\")",
            "toggle git": "user.idea(\"action ActivateVersionControlToolWindow\")",
            "toggle structure": "user.idea(\"action ActivateStructureToolWindow\")",
            "toggle database": "user.idea(\"action ActivateDatabaseToolWindow\")",
            "toggle database changes": "user.idea(\"action ActivateDatabaseChangesToolWindow\")",
            "toggle make": "user.idea(\"action ActivatemakeToolWindow\")",
            "toggle to do": "user.idea(\"action ActivateTODOToolWindow\")",
            "toggle docker": "user.idea(\"action ActivateDockerToolWindow\")",
            "toggle favorites": "user.idea(\"action ActivateFavoritesToolWindow\")",
            "toggle last": "user.idea(\"action JumpToLastWindow\")",
            "toggle pinned": "user.idea(\"action TogglePinnedMode\")",
            "toggle docked": "user.idea(\"action ToggleDockMode\")",
            "toggle floating": "user.idea(\"action ToggleFloatingMode\")",
            "toggle windowed": "user.idea(\"action ToggleWindowedMode\")",
            "toggle split": "user.idea(\"action ToggleSideMode\")",
            "toggle tool buttons": "user.idea(\"action ViewToolButtons\")",
            "toggle toolbar": "user.idea(\"action ViewToolBar\")",
            "toggle status [bar]": "user.idea(\"action ViewStatusBar\")",
            "toggle navigation [bar]": "user.idea(\"action ViewNavigationBar\")",
            "toggle power save": "user.idea(\"action TogglePowerSave\")",
            "toggle whitespace": "user.idea(\"action EditorToggleShowWhitespaces\")",
            "toggle indents": "user.idea(\"action EditorToggleShowIndentLines\")",
            "toggle line numbers": "user.idea(\"action EditorToggleShowLineNumbers\")",
            "toggle (bread crumbs | breadcrumbs)": "user.idea(\"action EditorToggleShowBreadcrumbs\")",
            "toggle gutter icons": "user.idea(\"action EditorToggleShowGutterIcons\")",
            "toggle wrap": "user.idea(\"action EditorToggleUseSoftWraps\")",
            "toggle parameters": "user.idea(\"action ToggleInlineHintsAction\")",
            "toggle fullscreen": "user.idea(\"action ToggleFullScreen\")",
            "toggle distraction [free mode]": "user.idea(\"action ToggleDistractionFreeMode\")",
            "toggle presentation [mode]": "user.idea(\"action TogglePresentationMode\")",
            "toggle comment": "code.toggle_comment()",
            "change scheme": "user.idea(\"action QuickChangeScheme\")",
            "(toggle | pop) (doc | documentation)": "user.idea(\"action QuickJavaDoc\")",
            "(pop deaf | toggle definition)": "user.idea(\"action QuickImplementations\")",
            "pop type": "user.idea(\"action ExpressionTypeInfo\")",
            "pop parameters": "user.idea(\"action ParameterInfo\")",
            "go breakpoints": "user.idea(\"action ViewBreakpoints\")",
            "toggle [line] breakpoint": "user.idea(\"action ToggleLineBreakpoint\")",
            "toggle method breakpoint": "user.idea(\"action ToggleMethodBreakpoint\")",
            "run menu": "user.idea(\"action ChooseRunConfiguration\")",
            "run test": "user.idea(\"action RunClass\")",
            "run test again": "user.idea(\"action Rerun\")",
            "debug test": "user.idea(\"action DebugClass\")",
            "step over": "user.idea(\"action StepOver\")",
            "step into": "user.idea(\"action StepInto\")",
            "step smart": "user.idea(\"action SmartStepInto\")",
            "step to line": "user.idea(\"action RunToCursor\")",
            "continue": "user.idea(\"action Resume\")",
            "(grow | shrink) window right": "user.idea(\"action ResizeToolWindowRight\")",
            "(grow | shrink) window left": "user.idea(\"action ResizeToolWindowLeft\")",
            "(grow | shrink) window up": "user.idea(\"action ResizeToolWindowUp\")",
            "(grow | shrink) window down": "user.idea(\"action ResizeToolWindowDown\")",
            "go next (error | air)": "user.idea(\"action GotoNextError\")",
            "go last (error | air)": "user.idea(\"action GotoPreviousError\")",
            "fix next (error | air)": "user.idea(\"action GotoNextError\")\n\t\tuser.idea(\"action ShowIntentionActions\")",
            "fix last (error | air)": "user.idea(\"action GotoPreviousError\")\n\t\tuser.idea(\"action ShowIntentionActions\")\n\t\t# Special Selects",
            "select less": "user.idea(\"action EditorUnSelectWord\")",
            "select (more|this)": "user.idea(\"action EditorSelectWord\")",
            "expand <number> until <number>": "user.select_range(number_1, number_2)\n\t\tuser.idea(\"action ExpandRegion\")",
            "collapse <number> until <number>": "user.select_range(number_1, number_2)\n\t\tuser.idea(\"action CollapseRegion\")",
            "paste <number> until <number>": "user.select_range(number_1, number_2)\n\t\tuser.idea(\"action EditorPaste\")",
            "refactor <number> until <number>": "user.select_range(number_1, number_2)\n\t\tuser.idea(\"action Refactorings.QuickListPopupAction\")",
            "clone <number>": "user.line_clone(number)",
            "clear last <user.text> [over]": "user.idea(\"find prev {text}, action EditorBackSpace\")",
            "clear next <user.text> [over]": "user.idea(\"find next {text}, action EditorBackSpace\")",
            "comment last <user.text> [over]": "user.idea(\"find prev {text}, action CommentByLineComment\")",
            "comment next <user.text> [over]": "user.idea(\"find next {text}, action CommentByLineComment\")",
            "go last <user.text> [over]": "user.idea(\"find prev {text}, action EditorRight\")",
            "go next <user.text> [over]": "user.idea(\"find next {text}, action EditorRight\")",
            "paste last <user.text> [over]": "user.idea(\"find prev {text}, action EditorRight, action EditorPaste\")",
            "paste next <user.text> [over]": "user.idea(\"find next {text}, action EditorRight, action EditorPaste\")",
            "refactor last <user.text> [over]": "user.idea(\"find prev {text}, action Refactorings.QuickListPopupAction\")",
            "refactor next <user.text> [over]": "user.idea(\"find next {text}, action Refactorings.QuickListPopupAction\")",
            "replace last <user.text> [over]": "user.idea(\"find prev {text}, action EditorPaste\")",
            "replace next <user.text> [over]": "user.idea(\"find next {text}, action EditorPaste\")",
            "select last <user.text> [over]": "user.idea(\"find prev {text}\")",
            "select next <user.text> [over]": "user.idea(\"find next {text}\")",
            "select camel left": "user.extend_camel_left()",
            "select camel right": "user.extend_camel_right()",
            "go camel left": "user.camel_left()",
            "go camel right": "user.camel_right()",
            "blacken": "user.idea(\"action BLACKReformatCode\")"
        }
    },
    {
        "file": "apps/kubectl/kubectl.talon",
        "context": "kubectl",
        "commands": {
            "cube [control]": "\"kubectl \"",
            "cube create": "\"kubectl create \"",
            "cube expose": "\"kubectl expose \"",
            "cube run": "\"kubectl run \"",
            "cube set": "\"kubectl set \"",
            "cube run container": "\"kubectl run-container \"",
            "cube explain": "\"kubectl explain \"",
            "cube get": "\"kubectl get \"",
            "cube edit": "\"kubectl edit \"",
            "cube delete": "\"kubectl delete \"",
            "cube rollout": "\"kubectl rollout \"",
            "cube rolling update": "\"kubectl rolling-update \"",
            "cube scale": "\"kubectl scale \"",
            "cube auto scale": "\"kubectl autoscale \"",
            "cube certificate": "\"kubectl certificate \"",
            "cube top": "\"kubectl top \"",
            "cube drain": "\"kubectl drain \"",
            "cube taint": "\"kubectl taint \"",
            "cube (cord | cordon)": "\"kubectl cordon \"",
            "cube (uncord | uncordon)": "\"kubectl uncordon \"",
            "cube cluster (info | information)": "\"kubectl cluster-info \"",
            "cube describe": "\"kubectl describe \"",
            "cube logs": "\"kubectl logs \"",
            "cube attach": "\"kubectl attach \"",
            "cube exec": "\"kubectl exec \"",
            "cube port forward": "\"kubectl port-forward \"",
            "cube proxy": "\"kubectl proxy \"",
            "cube copy": "\"kubectl cp \"",
            "cube auth": "\"kubectl auth \"",
            "cube diff": "\"kubectl diff \"",
            "cube apply": "\"kubectl apply \"",
            "cube patch": "\"kubectl patch \"",
            "cube replace": "\"kubectl replace \"",
            "cube wait": "\"kubectl wait \"",
            "cube convert": "\"kubectl convert \"",
            "cube customize": "\"kubectl kustomize \"",
            "cube label": "\"kubectl label \"",
            "cube annotate": "\"kubectl annotate \"",
            "cube completion": "\"kubectl completion \"",
            "cube (interface | API)": "\"kubectl api \"",
            "cube interface resources": "\"kubectl api-resources \"",
            "cube interface versions": "\"kubectl api-versions \"",
            "cube config": "\"kubectl config \"",
            "cube help": "\"kubectl help \"",
            "cube plugin": "\"kubectl plugin \"",
            "cube version": "\"kubectl version \"",
            "cube {user.kubectl_action} [{user.kubectl_object}]": "insert(\"kubectl {kubectl_action} \")\n\t\tinsert(kubectl_object or \"\")\n\t\t",
            "cube detach": "key(\"ctrl-p\")\n\t\tkey(\"ctrl-q\")",
            "cube shell": "insert(\"kubectl exec -it  -- /bin/bash\")\n\t\tkey(\"left:13\")"
        }
    },
    {
        "file": "apps/platforms/linux/dunst.talon",
        "context": "linux dunst",
        "commands": {
            "show notifications": "key(ctrl-`)",
            "dismiss [notifications]": "user.system_command('dunstctl close')",
            "dismiss all [notifications]": "user.system_command('dunstctl close-all')"
        }
    },
    {
        "file": "apps/platforms/linux/keepassx.talon",
        "context": "linux keepassx",
        "commands": {
            "open database": "key(ctrl-o)",
            "save database": "key(ctrl-s)",
            "close database": "key(ctrl-w)",
            "lock database": "key(ctrl-l)",
            "quit": "key(ctrl-q)",
            "[add] new entry": "key(ctrl-n)",
            "clone entry": "key(ctrl-k)",
            "(view|edit) entry": "key(ctrl-e)",
            "delete entry": "key(ctrl-d)",
            "copy user [name]": "key(ctrl-b)",
            "copy password": "key(ctrl-c)",
            "open (earl|url|link)": "key(ctrl-u)",
            "copy (earl|url|link)": "key(ctrl-alt-u)",
            "find": "key(ctrl-f)",
            "find <user.text>": "key(ctrl-f)\n\t\tinsert(\"{text}\")"
        }
    },
    {
        "file": "apps/platforms/linux/signal.talon",
        "context": "linux signal",
        "commands": {
            "show shortcuts": "key(\"ctrl-/\")",
            "(next|nav|navigate) [by] (sec|section)": "key(\"ctrl-t\")",
            "(prev|previous) (chat|conversation)": "key(\"alt-down\")",
            "next (chat|conversation)": "key(\"alt-up\")",
            "(prev|previous) unread": "key(\"alt-shift-down\")",
            "next unread": "key(\"alt-shift-up\")",
            "[open] (pref|preferences)": "key(\"ctrl-,\")",
            "open conversation menu": "key(\"ctrl-shift-l\")",
            "search": "key(\"ctrl-f\")",
            "search chat": "key(\"ctrl-shift-f\")",
            "focus (chat|composer)": "key(\"ctrl-shift-t\")",
            "open media": "key(\"ctrl-shift-m\")",
            "open emoji": "key(\"ctrl-shift-j\")",
            "open sticker": "key(\"ctrl-shift-s\")",
            "record [voice] message": "key(\"ctrl-shift-v\")",
            "archive chat": "key(\"ctrl-shift-a\")",
            "unarchive chat": "key(\"ctrl-shift-u\")",
            "(first|top) message": "key(\"ctrl-up\")",
            "(last|bottom) message": "key(\"ctrl-down\")",
            "close chat": "key(\"ctrl-shift-c\")",
            "send it": "key(\"enter\")",
            "message details": "key(\"ctrl-d\")",
            "reply [message]": "key(\"ctrl-shift-r\")",
            "react [message]": "key(\"ctrl-shift-e\")",
            "save attachment": "key(\"ctrl-s\")",
            "delete [message]": "key(\"ctrl-shift-d\")",
            "send message": "key(\"ctrl-enter\")",
            "expand chat": "key(\"ctrl-shift-x\")",
            "attach [file]": "key(\"ctrl-u\")",
            "remove [link] preview": "key(\"ctrl-p\")",
            "remove [link] attachment": "key(\"ctrl-shift-p\")"
        }
    },
    {
        "file": "apps/platforms/linux/taskwarrior.talon",
        "context": "linux taskwarrior",
        "commands": {
            "task version": "\"task --version\\n\"",
            "task commands": "\"task commands\\n\"",
            "task help": "\"task help\\n\"",
            "task list": "\"task list\\n\"",
            "task list orphans": "\"task project: list\\n\"",
            "task list untagged": "\"task tags.none: list\\n\"",
            "task list <user.text>": "\"task list {text}\\n\"",
            "task list project": "\"task list project: \"",
            "task list project <user.text>": "\"task list project:{text}\\n\"",
            "task add": "\"task add \"",
            "task add <user.text>": "\"task add {text}\\n\"",
            "task undo": "\"task undo\\n\"",
            "(tasks|task next)": "\"task next\\n\"",
            "task <number> edit": "\"task {number} edit\"",
            "task <number> done": "\"task {number} done\"",
            "task <number> delete": "\"task {number} delete\""
        }
    },
    {
        "file": "apps/platforms/linux/termite.talon",
        "context": "linux termite",
        "commands": {
            "shell yank": "key(\"y\")",
            "shell select": "key(\"ctrl-shift-space\")",
            "shell insert": "key(\"escape\")",
            "visual line": "key(\"v\")",
            "visual line mode": "key(\"V\")"
        }
    },
    {
        "file": "apps/platforms/linux/tmux.talon",
        "context": "linux tmux",
        "commands": {
            "mux": "\"tmux \"",
            "mux new session": "insert('tmux new ')",
            "mux sessions": "key(ctrl-b)\n\t\tkey(s)",
            "mux name session": "key(ctrl-b)\n\t\tkey($)",
            "mux kill session": "insert('tmux kill-session -t ')\n\t\t#window management",
            "mux new window": "key(ctrl-b)\n\t\tkey(c)",
            "mux window <number>": "key(ctrl-b )\n\t\tkey('{number}')",
            "mux previous window": "key(ctrl-b)\n\t\tkey(p)",
            "mux next window": "key(ctrl-b)\n\t\tkey(n)",
            "mux rename window": "key(ctrl-b)\n\t\tkey(,)",
            "mux close window": "key(ctrl-b)\n\t\tkey(&)\n\t\t#pane management",
            "mux split horizontal": "key(ctrl-b)\n\t\tkey(%)",
            "mux split vertical": "key(ctrl-b)\n\t\tkey(\")",
            "mux next pane": "key(ctrl-b)\n\t\tkey(o)",
            "mux move <user.arrow_key>": "key(ctrl-b)\n\t\tkey(arrow_key)",
            "mux close pane": "key(ctrl-b)\n\t\tkey(x)\n\t\t#Say a number right after this command, to switch to pane",
            "mux pane numbers": "key(ctrl-b)\n\t\tkey(q)"
        }
    },
    {
        "file": "apps/platforms/mac/finder/finder.talon",
        "context": "mac finder",
        "commands": {
            "preferences": "key(cmd-,)",
            "options": "key(cmd-j)",
            "search": "key(cmd-alt-f)",
            "sort by none": "key(ctrl-alt-cmd-0)",
            "sort by name": "key(ctrl-alt-cmd-1)",
            "sort by kind": "key(ctrl-alt-cmd-2)",
            "sort by date opened": "key(ctrl-alt-cmd-3)",
            "sort by date added": "key(ctrl-alt-cmd-4)",
            "sort by date modified": "key(ctrl-alt-cmd-5)",
            "sort by size": "key(ctrl-alt-cmd-6)",
            "icon view": "key(cmd-1)",
            "column view": "key(cmd-3)",
            "list view": "key(cmd-2)",
            "gallery view": "key(cmd-4)",
            "copy path": "key(alt-cmd-c)",
            "trash it": "key(cmd-backspace)",
            "hide [finder]": "key(cmd-h)",
            "hide others": "app.window_hide_others()"
        }
    },
    {
        "file": "apps/platforms/mac/notes/notes.talon",
        "context": "mac notes",
        "commands": {
            "new note": "key(cmd-n)",
            "duplicate note": "key(cmd-d)",
            "new folder": "key(shift-cmd-n)",
            "toggle folders": "key(alt-cmd-s)",
            "show main": "key(cmd-0)",
            "list view": "key(cmd-1)",
            "gallery view": "key(cmd-2)",
            "toggle attachments": "key(cmd-3)",
            "find all": "key(alt-cmd-f)",
            "print note": "key(cmd-p)",
            "attach file": "key(shift-cmd-a)",
            "create link": "key(cmd-k)",
            "insert table": "key(alt-cmd-t)",
            "apply title": "key(shift-cmd-t)",
            "apply heading": "key(shift-cmd-h)",
            "apply subheading": "key(shift-cmd-j)",
            "apply body": "key(shift-cmd-b)",
            "apply mono": "key(shift-cmd-m)",
            "apply bullet": "key(shift-cmd-7)",
            "apply dash": "key(shift-cmd-8)",
            "apply number": "key(shift-cmd-9)",
            "apply checklist": "key(shift-cmd-l)",
            "increase font": "key(cmd-+)",
            "decrease font": "key(cmd--)",
            "line break": "key(ctrl-enter)",
            "mark": "key(shift-cmd-u)",
            "drag [line] down": "key('ctrl-cmd-down')",
            "drag [line] up": "key('ctrl-cmd-up')"
        }
    },
    {
        "file": "apps/platforms/mac/rstudio.talon",
        "context": "mac rstudio",
        "commands": {
            "run that": "key(\"cmd-enter\")",
            "run document": "key(\"cmd-alt-r\")",
            "run from top": "key(\"cmd-alt-b\")",
            "run to end": "key(\"cmd-alt-e\")",
            "run (function|funk)": "key(\"cmd-alt-f\")",
            "run section": "key(\"cmd-alt-t\")",
            "run previous chunks": "key(\"cmd-alt-p\")",
            "run chunk": "key(\"cmd-alt-c\")",
            "run next chunk": "key(\"cmd-alt-n\")",
            "run all": "key(\"cmd-shift-s\")",
            "run knitter": "key(\"cmd-shift-k\")",
            "run profiler": "key(\"cmd-shift-alt-p\")",
            "jump back": "key(\"cmd-f9\")",
            "jump forward": "key(\"cmd-f10\")",
            "close all tabs": "key(\"cmd-shift-w\")",
            "indent lines": "key(\"cmd-i\")",
            "toggle comment": "key(\"cmd-shift-c\")",
            "reformat comment": "key(\"cmd-shift-/\")",
            "reformat R code": "key(\"cmd-shift-a\")",
            "line up": "key(\"alt-up\")",
            "line down": "key(\"alt-down\")",
            "duplicate line up": "key(\"cmd-alt-up\")",
            "duplicate line [down]": "key(\"cmd-alt-down\")",
            "select to paren": "key(\"ctrl-shift-e\")",
            "select to matching paren": "key(\"ctrl-shift-alt-e\")",
            "jump to matching": "key(\"ctrl-p\")",
            "expand selection": "key(\"shift-alt-cmd-up\")",
            "reduce selection": "key(\"shift-alt-cmd-down\")",
            "add cursor up": "key(\"ctrl-alt-up\")",
            "add cursor down": "key(\"ctrl-alt-down\")",
            "move active cursor up": "key(\"ctrl-alt-shift-up\")",
            "move active cursor down": "key(\"ctrl-alt-shift-down\")",
            "delete line": "key(\"cmd-d\")",
            "delete word left": "key(\"alt-backspace\")",
            "delete word right": "key(\"alt-delete\")",
            "assign that": "key(\"alt--\")",
            "pipe that": "key(\"cmd-shift-m\")",
            "insert knitter chunk": "key(\"cmd-alt-i\")",
            "fold that": "key(\"cmd-alt-l\")",
            "unfold that": "key(\"cmd-shift-alt-l\")",
            "fold all": "key(\"cmd-alt-o\")",
            "unfold all": "key(\"cmd-shift-alt-o\")",
            "find and replace": "key(\"cmd-f\")",
            "find next": "key(\"cmd-g\")",
            "find previous": "key(\"cmd-shift-g\")",
            "find with selection": "key(\"cmd-e\")",
            "find in files": "key(\"cmd-shift-f\")",
            "run replace": "key(\"cmd-shift-j\")",
            "run spell check": "key(\"f7\")",
            "go to source": "key(\"ctrl-1\")",
            "go to console": "key(\"ctrl-2\")",
            "go to help": "key(\"ctrl-3\")",
            "go to history": "key(\"ctrl-4\")",
            "go to files": "key(\"ctrl-5\")",
            "go to (plots|plot)": "key(\"ctrl-6\")",
            "go to packages": "key(\"ctrl-7\")",
            "go to environment": "key(\"ctrl-8\")",
            "go to git": "key(\"ctrl-9\")",
            "go to build": "key(\"ctrl-0\")",
            "go to terminal": "key(\"alt-shift-t\")",
            "go to omni": "key(\"ctrl-.\")",
            "go to line": "key(\"cmd-shift-alt-g\")",
            "go to section": "key(\"cmd-shift-alt-j\")",
            "go to tab": "key(\"ctrl-shift-.\")",
            "go to previous tab": "key(\"ctrl-f11\")",
            "go to next tab": "key(\"ctrl-f12\")",
            "go to first tab": "key(\"ctrl-shift-f11\")",
            "go to last tab": "key(\"ctrl-shift-f12\")",
            "zoom source": "key(\"ctrl-shift-1\")",
            "(zoom|show) all": "key(\"ctrl-shift-0\")",
            "help that": "key(\"f1\")",
            "define that": "key(\"f2\")",
            "previous plot": "key(\"cmd-alt-f11\")",
            "next plot": "key(\"cmd-alt-f12\")",
            "restart R session": "key(\"cmd-shift-f10\")",
            "dev tools build": "key(\"cmd-shift-b\")",
            "dev tools load all": "key(\"cmd-shift-l\")",
            "dev tools test": "key(\"cmd-shift-t\")",
            "dev tools check": "key(\"cmd-shift-e\")",
            "dev tools document": "key(\"cmd-shift-d\")",
            "toggle breakpoint": "key(\"shift-f9\")",
            "debug next": "key(\"f10\")",
            "debug step into (function|funk)": "key(\"shift-f4\")",
            "debug finish (function|funk)": "key(\"shift-f6\")",
            "debug continue": "key(\"shift-f5\")",
            "debug stop": "key(\"shift-f8\")",
            "run git diff": "key(\"ctrl-alt-d\")",
            "run git commit": "key(\"ctrl-alt-m\")"
        }
    },
    {
        "file": "apps/platforms/mac/terminal/apple_terminal.talon",
        "context": "mac apple terminal",
        "commands": {
            "suspend": "key(ctrl-z)",
            "resume": "insert(\"fg\")\n\t\tkey(enter)"
        }
    },
    {
        "file": "apps/platforms/win/explorer/explorer.talon",
        "context": "win explorer",
        "commands": {
            "go <user.letter>": "user.file_manager_open_volume(\"{letter}:\")",
            "go app data": "user.file_manager_open_directory(\"%AppData%\")",
            "go program files": "user.file_manager_open_directory(\"%programfiles%\")"
        }
    },
    {
        "file": "apps/platforms/win/outlook/outlook.talon",
        "context": "win outlook",
        "commands": {
            "archive": "key(alt h o 1)",
            "new e-mail": "key(ctrl-n)",
            "calendar": "key(ctrl-2)",
            "inbox": "key(ctrl-1)",
            "Reply": "key(ctrl-r)",
            "Reply all": "key(ctrl-shift-r)",
            "Forward": "key(ctrl-f)",
            "accept": "key(shift-f10 c c enter)"
        }
    },
    {
        "file": "apps/platforms/win/windows_terminal/windows_terminal.talon",
        "context": "win windows terminal",
        "commands": {
            "settings open": "key(ctrl-,)",
            "focus left": "key(ctrl-alt-shift-left)",
            "focus right": "key(ctrl-alt-shift-right)",
            "focus up": "key(ctrl-alt-shift-up)",
            "focus down": "key(ctrl-alt-shift-down)",
            "split right": "key(alt-shift-=)",
            "split down": "key(alt-shift--)",
            "term menu": "key(ctrl-shift-f1)",
            "run last": "key(up enter)",
            "kill all": "key(ctrl-c)\n\t\tinsert(\"y\")\n\t\tkey(enter)\n\t\t\n\t\t",
            "find it": "edit.find()\n\t\t",
            "find it <phrase>": "# handle consecutive finds by first escaping out of any previous one\n\t\tkey(escape)\n\t\t# make it so\n\t\tedit.find(\"{phrase}\\n\")\n\t\t"
        }
    },
    {
        "file": "apps/platforms/win/wsl/wsl.talon",
        "context": "win wsl",
        "commands": {
            "go <user.letter>": "user.file_manager_open_volume(\"/mnt/{letter}\")",
            "(wsl|weasel) reset path detection": "user.wsl_reset_path_detection()",
            "(wsl|weasel) speak": "user.wsl_speak()"
        }
    },
    {
        "file": "apps/slack/slack_mac.talon",
        "context": "slack mac",
        "commands": {
            "workspace <number>": "key(\"cmd-{number}\")",
            "(slack | lack) [channel] info": "key(cmd-shift-i)",
            "focus (move | next)": "key(ctrl-`)",
            "(section | zone) [next]": "key(f6)",
            "(section | zone) (previous | last)": "key(shift-f6)",
            "(slack | lack) [direct] messages": "key(cmd-shift-k)",
            "(slack | lack) threads": "key(cmd-shift-t)",
            "(slack | lack) (history [next] | back | backward)": "key(cmd-[)",
            "(slack | lack) forward": "key(cmd-])",
            "(element | bit) [next]": "key(tab)",
            "(element | bit) (previous | last)": "key(shift-tab)",
            "(slack | lack) (my stuff | activity)": "key(cmd-shift-m)",
            "(slack | lack) directory": "key(cmd-shift-e)",
            "(slack | lack) (starred [items] | stars)": "key(cmd-shift-s)",
            "(slack | lack) unread [messages]": "key(cmd-shift-a)",
            "(go | undo | toggle) full": "key(ctrl-cmd-f)",
            "grab left": "key(shift-up)",
            "grab right": "key(shift-down)",
            "add line": "key(shift-enter)",
            "(slack | lack) (slap | slaw | slapper)": "key(cmd-right shift-enter)",
            "(slack | lack) (react | reaction)": "key(cmd-shift-\\)",
            "(insert command | commandify)": "key(cmd-shift-c)",
            "insert code": "insert(\"```\")",
            "(slack | lack) (bull | bullet | bulleted) [list]": "key(cmd-shift-8)",
            "(slack | lack) (number | numbered) [list]": "key(cmd-shift-7)",
            "(slack | lack) (quotes | quotation)": "key(cmd-shift->)",
            "bold": "key(cmd-b)",
            "(italic | italicize)": "key(cmd-i)",
            "(strike | strikethrough)": "key(cmd-shift-x)",
            "(slack | lack) snippet": "key(cmd-shift-enter)",
            "([toggle] mute | unmute)": "key(m)",
            "(slack | lack) ([toggle] video)": "key(v)",
            "(slack | lack) invite": "key(a)",
            "(slack | lack) shortcuts": "key(cmd-/)",
            "emote <user.text>": "\"{text}\"",
            "toggle left sidebar": "key(cmd-shift-d)",
            "toggle right sidebar": "key(cmd-.)",
            "(move | next) focus": "app.notify(\"please use the voice command 'focus next' instead of 'next focus'\")\n\t\tkey(ctrl-`)",
            "[next] (section | zone)": "app.notify(\"please use the voice command 'section next' instead of 'next section'\")\n\t\tkey(f6)",
            "(previous | last) (section | zone)": "app.notify(\"please use the voice command 'section last' instead of 'last section'\")\n\t\tkey(shift-f6)",
            "[next] (element | bit)": "app.notify(\"please use the voice command 'element next' instead of 'next element'\")\n\t\tkey(tab)",
            "(previous | last) (element | bit)": "app.notify(\"please use the voice command 'element last' instead of 'last element'\")\n\t\tkey(shift-tab)"
        }
    },
    {
        "file": "apps/slack/slack_win.talon",
        "context": "slack win",
        "commands": {
            "workspace <number>": "key(\"ctrl-{number}\")",
            "(slack | lack) [channel] info": "key(ctrl-shift-i)",
            "focus (move | next)": "key(ctrl-`)",
            "(section | zone) [next]": "key(f6)",
            "(section | zone) (previous | last)": "key(shift-f6)",
            "(slack | lack) [direct] messages": "key(ctrl-shift-k)",
            "(slack | lack) threads": "key(ctrl-shift-t)",
            "(slack | lack) (history [next] | back | backward)": "key(alt-left)",
            "(slack | lack) forward": "key(alt-right)",
            "(element | bit) [next]": "key(tab)",
            "(element | bit) (previous | last)": "key(shift-tab)",
            "(slack | lack) (my stuff | activity)": "key(ctrl-shift-m)",
            "(slack | lack) directory": "key(ctrl-shift-e)",
            "(slack | lack) (starred [items] | stars)": "key(ctrl-shift-s)",
            "(slack | lack) unread [messages]": "key(ctrl-shift-a)",
            "grab left": "key(shift-up)",
            "grab right": "key(shift-down)",
            "add line": "key(shift-enter)",
            "(slack | lack) (react | reaction)": "key(ctrl-shift-\\)",
            "(insert command | commandify)": "key(ctrl-shift-c)",
            "insert code": "insert(\"```\")",
            "(slack | lack) (bull | bullet | bulleted) [list]": "key(ctrl-shift-8)",
            "(slack | lack) (number | numbered) [list]": "key(ctrl-shift-7)",
            "(slack | lack) (quotes | quotation)": "key(ctrl-shift-9)",
            "bold": "key(ctrl-b)",
            "(italic | italicize)": "key(ctrl-i)",
            "(strike | strikethrough)": "key(ctrl-shift-x)",
            "(slack | lack) snippet": "key(ctrl-shift-enter)",
            "([toggle] mute | unmute)": "key(m)",
            "(slack | lack) ([toggle] video)": "key(v)",
            "(slack | lack) invite": "key(a)",
            "(slack | lack) shortcuts": "key(ctrl-/)",
            "emote <user.text>": "\"{text}\"",
            "toggle left sidebar": "key(ctrl-shift-d)",
            "toggle right sidebar": "key(ctrl-.)",
            "(move | next) focus": "app.notify(\"please use the voice command 'focus next' instead of 'next focus'\")\n\t\tkey(ctrl-`)",
            "[next] (section | zone)": "app.notify(\"please use the voice command 'section next' instead of 'next section'\")\n\t\tkey(f6)",
            "(previous | last) (section | zone)": "app.notify(\"please use the voice command 'section last' instead of 'last section'\")\n\t\tkey(shift-f6)",
            "[next] (element | bit)": "app.notify(\"please use the voice command 'element next' instead of 'next element'\")\n\t\tkey(tab)",
            "(previous | last) (element | bit)": "app.notify(\"please use the voice command 'element last' instead of 'last element'\")\n\t\tkey(shift-tab)"
        }
    },
    {
        "file": "apps/talon_repl.talon",
        "context": "talon repl",
        "commands": {
            "test last": "phrase = user.history_get(1)\n\t\tcommand = \"sim('{phrase}')\"\n\t\tinsert(command)\n\t\tkey(enter)",
            "test <phrase>": "insert(\"sim('{phrase}')\")\n\t\tkey(enter)",
            "test numb <number_small>": "phrase = user.history_get(number_small)\n\t\tcommand = \"sim('{phrase}')\"\n\t\t#to do: shouldn't this work?\n\t\t#user.paste(\"sim({phrase})\")\n\t\tinsert(command)\n\t\tkey(enter)\n\t\t# requires user.talon_populate_lists tag. do not use with dragon",
            "debug action {user.talon_actions}": "insert(\"actions.find('{user.talon_actions}')\")\n\t\tkey(enter)\n\t\t# requires user.talon_populate_lists tag. do not use with dragon",
            "debug list {user.talon_lists}": "insert(\"actions.user.talon_pretty_print(registry.lists['{talon_lists}'])\")\n\t\tkey(enter)",
            "debug tags": "insert(\"actions.user.talon_pretty_print(registry.tags)\")\n\t\tkey(enter)",
            "debug settings": "insert(\"actions.user.talon_pretty_print(registry.settings)\")\n\t\tkey(enter)",
            "debug modes": "insert(\"actions.user.talon_pretty_print(scope.get('mode'))\")\n\t\tkey(enter)\n\t\t# requires user.talon_populate_lists tag. do not use with dragon",
            "debug scope {user.talon_scopes}": "insert(\"actions.user.talon_pretty_print(scope.get('{talon_scopes}'))\")\n\t\tkey(enter)",
            "debug running apps": "insert(\"actions.user.talon_pretty_print(ui.apps(background=False))\")\n\t\tkey(enter)",
            "debug all windows": "insert(\"actions.user.talon_pretty_print(ui.windows())\")\n\t\tkey(enter)",
            "debug {user.running} windows": "insert(\"actions.user.talon_debug_app_windows('{running}')\")\n\t\tkey(enter)"
        }
    },
    {
        "file": "apps/teams/teams.talon",
        "context": "teams",
        "commands": {
            "show shortcuts": "key(ctrl-.)",
            "[go] [to] search": "key(ctrl-e)",
            "show commands": "key(ctrl-/)",
            "open filter": "key(ctrl-shift-f)",
            "go to": "key(ctrl-g)",
            "open (apps|applications)": "key(ctrl-`)",
            "[start] new chat": "key(ctrl-n)",
            "open settings": "key(ctrl-,)",
            "open help": "key(f1)",
            "close": "key(escape)",
            "open activity": "key(ctrl-1)",
            "open chat": "key(ctrl-2)",
            "open teams": "key(ctrl-3)",
            "open calendar": "key(ctrl-4)",
            "open planner": "key(ctrl-5)",
            "open calls": "key(ctrl-6)",
            "open files": "key(ctrl-7)",
            "[go] [to] (prev|previous) [list] item": "key(alt-up)",
            "[go] [to] next [list] item": "key(alt-down)",
            "move [selected] team up": "key(ctrl-shift-up)",
            "move [selected] team down": "key(ctrl-shift-down)",
            "[go] [to] (prev|previous) section": "key(ctrl-shift-f6)",
            "[go] [to] next section": "key(ctrl-f6)",
            "[go] [to] compose [box]": "key(c)",
            "[expand] compose [box]": "key(ctrl-shift-x)",
            "send": "key(ctrl-enter)",
            "attach file": "key(ctrl-o)",
            "[start] new line": "key(shift-enter)",
            "reply [to] [thread]": "key(r)",
            "accept video call": "key(ctrl-shift-a)",
            "accept audio call": "key(ctrl-shift-s)",
            "decline call": "key(ctrl-shift-d)",
            "start audio call": "key(ctrl-shift-c)",
            "start video call": "key(ctrl-shift-u)",
            "toggle mute": "key(ctrl-shift-m)",
            "starch screen share session": "key(ctrl-shift-e)",
            "toggle video": "key(ctrl-shift-o)",
            "[go] [to] sharing toolbar": "key(ctrl-shift-space)",
            "decline screen share": "key(ctrl-shift-d)",
            "accept screen share": "key(ctrl-shift-a)",
            "schedule [a] meeting": "key(alt-shift-n)",
            "go to current time": "key(alt-.)",
            "go to (prev|previous) (day|week)": "key(ctrl-alt-left)",
            "go to next (day|week)": "key(ctrl-alt-right)",
            "view day": "key(ctrl-alt-1)",
            "view work week": "key(ctrl-alt-2)",
            "view week": "key(ctrl-alt-3)",
            "(safe|send) meeting request": "key(ctrl-s)",
            "join [from] meeting [details]": "key(alt-shift-j)",
            "go to suggested time": "key(alt-shift-s)"
        }
    },
    {
        "file": "apps/teams/teams_mac.talon",
        "context": "teams mac",
        "commands": {
            "open history": "key(super-shift-h)",
            "view shortcuts": "key(super-.)",
            "show shortcuts": "key(super-.)",
            "[go] [to] search": "key(super-e)",
            "show commands": "key(super-/)",
            "open filter": "key(super-shift-f)",
            "go to": "key(super-g)",
            "open (apps|applications)": "key(ctrl-`)",
            "[start] new chat": "key(super-n)",
            "open settings": "key(super-,)",
            "open help": "key(f1)",
            "close": "key(escape)",
            "reset": "key(escape)\n\t\tkey(escape)\n\t\tkey(escape)\n\t\tkey(escape)",
            "zoom reset": "key(super-0)\n\t\t\n\t\t# navigations",
            "open (act|activity)": "key(super-1)",
            "open chat": "key(super-2)",
            "open teams": "key(super-3)",
            "open calendar": "key(super-4)",
            "open calls": "key(super-5)",
            "open files": "key(super-6)",
            "[go] [to] (prev|previous) [list] item": "key(alt-up)",
            "[go] [to] next [list] item": "key(alt-down)",
            "move [selected] team up": "key(super-shift-up)",
            "move [selected] team down": "key(super-shift-down)",
            "[go] [to] (prev|previous) section": "key(super-shift-f6)",
            "[go] [to] next section": "key(super-f6)",
            "[go] [to] compose [box]": "key(shift-alt-c)",
            "[expand] compose [box]": "key(super-shift-x)",
            "send message": "key(super-enter)",
            "attach file": "key(shift-alt-o)",
            "attach local file": "key(shift-alt-o)\n\t\tsleep(100ms)\n\t\tkey(down)\n\t\tkey(space)",
            "[start] new line": "key(shift-enter)",
            "reply [to] [thread]": "key(shift-alt-r)",
            "accept video call": "key(super-shift-a)",
            "accept audio call": "key(super-shift-s)",
            "decline call": "key(super-shift-d)",
            "start audio call": "key(super-shift-c)",
            "start video call": "key(super-shift-u)",
            "toggle mute": "key(super-shift-m)",
            "starch screen share session": "key(super-shift-e)",
            "toggle video": "key(super-shift-o)",
            "[go] [to] sharing toolbar": "key(super-shift-space)",
            "decline screen share": "key(super-shift-d)",
            "accept screen share": "key(super-shift-a)",
            "schedule [a] meeting": "key(alt-shift-n)",
            "go to current time": "key(alt-.)",
            "go to (prev|previous) (day|week)": "key(super-alt-left)",
            "go to next (day|week)": "key(super-alt-right)",
            "view day": "key(super-alt-1)",
            "view work week": "key(super-alt-2)",
            "view week": "key(super-alt-3)",
            "(save|send) meeting request": "key(super-s)",
            "join [from] meeting [details]": "key(alt-shift-j)",
            "go to suggested time": "key(alt-shift-s)",
            "(raise|lower) hand": "key(super-shift-k)",
            "leave team meeting": "key(super-shift-h)"
        }
    },
    {
        "file": "apps/visualstudio/visual_studio.talon",
        "context": "visual studio",
        "commands": {
            "panel solution": "key(ctrl-alt-l)",
            "panel properties": "key(f4)",
            "panel output": "key(ctrl-alt-o)",
            "panel class": "key(ctrl-shift-c)",
            "panel errors": "key(ctrl-\\ ctrl-e)",
            "panel design": "key(shift-f7)",
            "panel marks": "key(ctrl-k ctrl-w)",
            "panel breakpoints": "key(ctrl-alt-b)",
            "show settings": "key(alt-t o)",
            "fullscreen switch": "key(shift-alt-enter)",
            "wrap switch": "key(ctrl-e ctrl-w)",
            "file hunt [<user.text>]": "key(ctrl-shift-t)\n\t\tinsert(text or \"\")",
            "file create": "key(ctrl-n)",
            "file rename": "key(ctrl-[ s f2)",
            "file reveal": "key(ctrl-[ s)",
            "hint show": "key(ctrl-shift-space)",
            "definition show": "key(f12)",
            "definition peek": "key(alt-f12)",
            "references find": "key(shift-f12)",
            "format that": "key(ctrl-k ctrl-d)",
            "format selection": "key(ctrl-k ctrl-f)",
            "imports fix": "key(ctrl-r ctrl-g)",
            "refactor field": "key(ctrl-r ctrl-e)",
            "refactor interface": "key(ctrl-r ctrl-i)",
            "refactor method": "key(ctrl-r ctrl-m)",
            "refactor reorder parameters": "key(ctrl-r ctrl-o)",
            "refactor remove parameters": "key(ctrl-r ctrl-v)",
            "refactor that": "key(ctrl-r ctrl-r)",
            "(go declaration | follow)": "key(ctrl-f12)",
            "go back": "key(ctrl--)",
            "go forward": "key(ctrl-shift--)",
            "go implementation": "key(f12)",
            "go recent [<user.text>]": "key(ctrl-1 ctrl-r)\n\t\tsleep(100ms)\n\t\tinsert(text or \"\")",
            "go type [<user.text>]": "key(ctrl-1 ctrl-t)\n\t\tsleep(100ms)\n\t\tinsert(text or \"\")",
            "go member [<user.text>]": "key(alt-\\)\n\t\tsleep(100ms)\n\t\tinsert(text or \"\")",
            "go usage": "key(shift-f12)",
            "go marks": "key(ctrl-k ctrl-w)",
            "toggle mark": "key(ctrl-k ctrl-k)",
            "go next mark": "key(ctrl-k ctrl-n)",
            "go last mark": "key(ctrl-k ctrl-p)",
            "fold toggle": "key(ctrl-m ctrl-m)",
            "fold toggle all": "key(ctrl-m ctrl-l)",
            "fold definitions": "key(ctrl-m ctrl-o)",
            "break point": "key(f9)",
            "step over": "key(f10)",
            "debug step into": "key(f11)",
            "debug step out [of]": "key(f10)",
            "debug start": "key(f5)",
            "debug stopper": "key(shift-f5)",
            "debug continue": "key(f5)"
        }
    },
    {
        "file": "apps/vscode/vscode.talon",
        "context": "vscode",
        "commands": {
            "window reload": "user.vscode(\"workbench.action.reloadWindow\")",
            "window close": "user.vscode(\"workbench.action.closeWindow\")",
            "please [<user.text>]": "user.vscode(\"workbench.action.showCommands\")\n\t\tinsert(user.text or \"\")\n\t\t\n\t\t# Sidebar",
            "bar explore": "user.vscode(\"workbench.view.explorer\")",
            "bar extensions": "user.vscode(\"workbench.view.extensions\")",
            "bar outline": "user.vscode(\"outline.focus\")",
            "bar run": "user.vscode(\"workbench.view.debug\")",
            "bar search": "user.vscode(\"workbench.view.search\")",
            "bar source": "user.vscode(\"workbench.view.scm\")",
            "bar switch": "user.vscode(\"workbench.action.toggleSidebarVisibility\")",
            "symbol hunt [<user.text>]": "user.vscode(\"workbench.action.gotoSymbol\")\n\t\tsleep(50ms)\n\t\tinsert(text or \"\")\n\t\t\n\t\t# Panels",
            "panel control": "user.vscode(\"workbench.panel.repl.view.focus\")",
            "panel output": "user.vscode(\"workbench.panel.output.focus\")",
            "panel problems": "user.vscode(\"workbench.panel.markers.view.focus\")",
            "panel switch": "user.vscode(\"workbench.action.togglePanel\")",
            "panel terminal": "user.vscode(\"workbench.action.terminal.focus\")",
            "focus editor": "user.vscode(\"workbench.action.focusActiveEditorGroup\")",
            "show settings": "user.vscode(\"workbench.action.openGlobalSettings\")",
            "show shortcuts": "user.vscode(\"workbench.action.openGlobalKeybindings\")",
            "show snippets": "user.vscode(\"workbench.action.openSnippets\")",
            "centered switch": "user.vscode(\"workbench.action.toggleCenteredLayout\")",
            "fullscreen switch": "user.vscode(\"workbench.action.toggleFullScreen\")",
            "theme switch": "user.vscode(\"workbench.action.selectTheme\")",
            "wrap switch": "user.vscode(\"editor.action.toggleWordWrap\")",
            "zen switch": "user.vscode(\"workbench.action.toggleZenMode\")",
            "file hunt [<user.text>]": "user.vscode(\"workbench.action.quickOpen\")\n\t\tsleep(50ms)\n\t\tinsert(text or \"\")",
            "file copy path": "user.vscode(\"copyFilePath\")",
            "file create sibling": "user.vscode_and_wait(\"explorer.newFile\")",
            "file create": "user.vscode(\"workbench.action.files.newUntitledFile\")",
            "file rename": "user.vscode(\"fileutils.renameFile\")\n\t\tsleep(150ms)",
            "file move": "user.vscode(\"fileutils.moveFile\")\n\t\tsleep(150ms)",
            "file open folder": "user.vscode(\"revealFileInOS\")",
            "file reveal": "user.vscode(\"workbench.files.action.showActiveFileInExplorer\")",
            "save ugly": "user.vscode(\"workbench.action.files.saveWithoutFormatting\")",
            "suggest show": "user.vscode(\"editor.action.triggerSuggest\")",
            "hint show": "user.vscode(\"editor.action.triggerParameterHints\")",
            "definition show": "user.vscode(\"editor.action.revealDefinition\")",
            "definition peek": "user.vscode(\"editor.action.peekDefinition\")",
            "definition side": "user.vscode(\"editor.action.revealDefinitionAside\")",
            "references show": "user.vscode(\"editor.action.goToReferences\")",
            "references find": "user.vscode(\"references-view.find\")",
            "format that": "user.vscode(\"editor.action.formatDocument\")",
            "format selection": "user.vscode(\"editor.action.formatSelection\")",
            "imports fix": "user.vscode(\"editor.action.organizeImports\")",
            "problem next": "user.vscode(\"editor.action.marker.nextInFiles\")",
            "problem last": "user.vscode(\"editor.action.marker.prevInFiles\")",
            "problem fix": "user.vscode(\"problems.action.showQuickFixes\")",
            "rename that": "user.vscode(\"editor.action.rename\")",
            "refactor that": "user.vscode(\"editor.action.refactor\")",
            "whitespace trim": "user.vscode(\"editor.action.trimTrailingWhitespace\")",
            "language switch": "user.vscode(\"workbench.action.editor.changeLanguageMode\")",
            "refactor rename": "user.vscode(\"editor.action.rename\")",
            "refactor this": "user.vscode(\"editor.action.refactor\")",
            "(go declaration | follow)": "user.vscode(\"editor.action.revealDefinition\")",
            "go back": "user.vscode(\"workbench.action.navigateBack\")",
            "go forward": "user.vscode(\"workbench.action.navigateForward\")",
            "go implementation": "user.vscode(\"editor.action.goToImplementation\")",
            "go type": "user.vscode(\"editor.action.goToTypeDefinition\")",
            "go usage": "user.vscode(\"references-view.find\")",
            "go recent [<user.text>]": "user.vscode(\"workbench.action.openRecent\")\n\t\tsleep(50ms)\n\t\tinsert(text or \"\")\n\t\tsleep(250ms)\n\t\t\n\t\t# Bookmarks. Requires Bookmarks plugin",
            "go marks": "user.vscode(\"workbench.view.extension.bookmarks\")",
            "toggle mark": "user.vscode(\"bookmarks.toggle\")",
            "go next mark": "user.vscode(\"bookmarks.jumpToNext\")",
            "go last mark": "user.vscode(\"bookmarks.jumpToPrevious\")",
            "fold that": "user.vscode(\"editor.fold\")",
            "unfold that": "user.vscode(\"editor.unfold\")",
            "fold those": "user.vscode(\"editor.foldAllMarkerRegions\")",
            "unfold those": "user.vscode(\"editor.unfoldRecursively\")",
            "fold all": "user.vscode(\"editor.foldAll\")",
            "unfold all": "user.vscode(\"editor.unfoldAll\")",
            "fold comments": "user.vscode(\"editor.foldAllBlockComments\")",
            "git branch": "user.vscode(\"git.branchFrom\")",
            "git branch this": "user.vscode(\"git.branch\")",
            "git checkout [<user.text>]": "user.vscode(\"git.checkout\")\n\t\tsleep(50ms)\n\t\tinsert(text or \"\")",
            "git commit [<user.text>]": "user.vscode(\"git.commitStaged\")\n\t\tsleep(100ms)\n\t\tuser.insert_formatted(text or \"\", \"CAPITALIZE_FIRST_WORD\")",
            "git commit undo": "user.vscode(\"git.undoCommit\")",
            "git commit amend": "user.vscode(\"git.commitStagedAmend\")",
            "git diff": "user.vscode(\"git.openChange\")",
            "git ignore": "user.vscode(\"git.ignore\")",
            "git merge": "user.vscode(\"git.merge\")",
            "git output": "user.vscode(\"git.showOutput\")",
            "git pull": "user.vscode(\"git.pullRebase\")",
            "git push": "user.vscode(\"git.push\")",
            "git push focus": "user.vscode(\"git.pushForce\")",
            "git rebase abort": "user.vscode(\"git.rebaseAbort\")",
            "git reveal": "user.vscode(\"git.revealInExplorer\")",
            "git revert": "user.vscode(\"git.revertChange\")",
            "git stash": "user.vscode(\"git.stash\")",
            "git stash pop": "user.vscode(\"git.stashPop\")",
            "git status": "user.vscode(\"workbench.scm.focus\")",
            "git stage": "user.vscode(\"git.stage\")",
            "git stage all": "user.vscode(\"git.stageAll\")",
            "git unstage": "user.vscode(\"git.unstage\")",
            "git unstage all": "user.vscode(\"git.unstageAll\")",
            "pull request": "user.vscode(\"pr.create\")",
            "change next": "key(alt-f5)",
            "change last": "key(shift-alt-f5)",
            "break point": "user.vscode(\"editor.debug.action.toggleBreakpoint\")",
            "step over": "user.vscode(\"workbench.action.debug.stepOver\")",
            "debug step into": "user.vscode(\"workbench.action.debug.stepInto\")",
            "debug step out [of]": "user.vscode(\"workbench.action.debug.stepOut\")",
            "debug start": "user.vscode(\"workbench.action.debug.start\")",
            "debug pause": "user.vscode(\"workbench.action.debug.pause\")",
            "debug stopper": "user.vscode(\"workbench.action.debug.stop\")",
            "debug continue": "user.vscode(\"workbench.action.debug.continue\")",
            "debug restart": "user.vscode(\"workbench.action.debug.restart\")",
            "debug console": "user.vscode(\"workbench.debug.action.toggleRepl\")",
            "terminal external": "user.vscode(\"workbench.action.terminal.openNativeConsole\")",
            "terminal new": "user.vscode(\"workbench.action.terminal.new\")",
            "terminal next": "user.vscode(\"workbench.action.terminal.focusNext\")",
            "terminal last": "user.vscode(\"workbench.action.terminal.focusPrevious\")",
            "terminal split": "user.vscode(\"workbench.action.terminal.split\")",
            "terminal zoom": "user.vscode(\"workbench.action.toggleMaximizedPanel\")",
            "terminal trash": "user.vscode(\"workbench.action.terminal.kill\")",
            "terminal toggle": "user.vscode_and_wait(\"workbench.action.terminal.toggleTerminal\")",
            "terminal scroll up": "user.vscode(\"workbench.action.terminal.scrollUp\")",
            "terminal scroll down": "user.vscode(\"workbench.action.terminal.scrollDown\")",
            "terminal <number_small>": "user.vscode_terminal(number_small)",
            "copy line down": "user.vscode(\"editor.action.copyLinesDownAction\")",
            "copy line up": "user.vscode(\"editor.action.copyLinesUpAction\")",
            "select less": "user.vscode(\"editor.action.smartSelect.shrink\")",
            "select (more|this)": "user.vscode(\"editor.action.smartSelect.expand\")",
            "minimap": "user.vscode(\"editor.action.toggleMinimap\")",
            "maximize": "user.vscode(\"workbench.action.minimizeOtherEditors\")",
            "restore": "user.vscode(\"workbench.action.evenEditorWidths\")",
            "replace here": "user.replace(\"\")\n\t\tkey(cmd-alt-l)\n\t\t",
            "hover show": "user.vscode(\"editor.action.showHover\")",
            "join lines": "user.vscode(\"editor.action.joinLines\")",
            "full screen": "user.vscode(\"workbench.action.toggleFullScreen\")",
            "curse undo": "user.vscode(\"cursorUndo\")",
            "select word": "user.vscode(\"editor.action.addSelectionToNextFindMatch\")",
            "skip word": "user.vscode(\"editor.action.moveSelectionToNextFindMatch\")",
            "cell next": "user.vscode(\"jupyter.gotoNextCellInFile\")",
            "cell last": "user.vscode(\"jupyter.gotoPrevCellInFile\")",
            "cell run above": "user.vscode(\"jupyter.runallcellsabove.palette\")",
            "cell run": "user.vscode(\"jupyter.runcurrentcell\")",
            "install local": "user.vscode(\"workbench.extensions.action.installVSIX\")"
        }
    },
    {
        "file": "apps/web/github.talon",
        "context": "github",
        "commands": {
            "focus search": "key(s)",
            "go to notifications": "insert(\"gn\")",
            "go to dashboard": "insert(\"gd\")",
            "(keyboard shortcuts show | show keyboard shortcuts)": "key(?)",
            "(selection move down | move selection down)": "key(j)",
            "(selection move up | move selection up)": "key(k)",
            "(selection toggle | toggle selection)": "key(x)",
            "(selection open | open selection)": "key(o)",
            "go to code": "insert(\"gc\")",
            "go to issues": "insert(\"gi\")",
            "go to pull requests": "insert(\"gp\")",
            "go to wiki": "insert(\"gw\")",
            "go to actions": "insert(\"ga\")",
            "go to projects": "insert(\"gb\")",
            "go to discussions": "insert(\"gg\")",
            "[web] editor open": "key(.)",
            "(file find | find file)": "key(t)",
            "jump to line": "key(l)",
            "((branch|tag) switch | switch (branch|tag))": "key(w)",
            "(url expand | expand url)": "key(y)",
            "(show|hide) comments": "key(i)",
            "blame view open": "key(b)",
            "(show|hide) annotations": "key(a)",
            "(issue create | create [an] issue)": "key(c)",
            "search (issues|[pull] requests)": "key(/)",
            "(filter by|edit) labels": "key(l)",
            "(filter by|edit) milestones": "key(m)",
            "(filter by|edit) assignee": "key(a)",
            "reply": "key(r)",
            "(comment submit | submit comment)": "key(ctrl-enter)",
            "(comment preview | preview comment)": "key(ctrl-shift-p)",
            "git hub full screen": "key(ctrl-shift-l)",
            "(form close | close form)": "key(escape)",
            "parent commit": "key(p)",
            "other parent commit": "key(o)",
            "mark as read": "key(y)",
            "(thread mute | mute thread)": "key(shift-m)",
            "(issue open | open issue)": "key(o)",
            "(issue create | create issue)": "key(c)",
            "reviewer request": "key(q)",
            "milestone set": "key(m)",
            "assignee set": "key(a)",
            "label set": "key(l)",
            "go to workflow": "insert(\"gf\")",
            "timestamps toggle": "key(shift-t)",
            "fullscreen toggle": "key(shift-f)"
        }
    },
    {
        "file": "apps/web/gitlab.talon",
        "context": "gitlab",
        "commands": {
            "show shortcuts": "key(?)",
            "go to projects [page]": "key(shift-p)",
            "go to groups [page]": "key(shift-g)",
            "go to activity [page]": "key(shift-a)",
            "go to milestones [page]": "key(shift-l)",
            "go to snippets [page]": "key(shift-s)",
            "search page": "key(s)",
            "go to issues [page]": "key(shift-i)",
            "go to merge requests [page]": "key(shift-m)",
            "go to to do [list] [page]": "key(shift-t)",
            "(show|hide) performance bar": "key(p)",
            "edit last comment": "key(1)",
            "toggle mark down [preview]": "key(ctrl-shift-p)",
            "go [to] project home [page]": "insert(\"gp\")",
            "go [to] project activity [feed]": "insert(\"gv\")",
            "go [to] project releases [list]": "insert(\"gr\")",
            "go [to] project files [list]": "insert(\"gf\")",
            "go [to] project file search [page]": "key(t)",
            "go [to] project (commit|commits) [list]": "insert(\"gc\")",
            "go [to] (repository|repo) graph [page]": "insert(\"gn\")",
            "go [to] (repository|repo) charts": "insert(\"gd\")",
            "go [to] project issues [list]": "insert(\"gi\")",
            "go [to] new issues [list]": "insert(\"i\")",
            "go [to] project issues boards [list]": "insert(\"gb\")",
            "go [to] project merge requests [list]": "insert(\"gm\")",
            "go [to] jobs [list]": "insert(\"gj\")",
            "go [to] project metrics": "insert(\"gl\")",
            "go [to] project environments": "insert(\"ge\")",
            "go [to] project cubes": "insert(\"gk\")",
            "go [to] project snippets [list]": "insert(\"gs\")",
            "go [to] project wiki": "insert(\"gw\")",
            "edit description": "key(e)",
            "change assignee": "key(a)",
            "change milestone": "key(m)",
            "change label": "key(l)",
            "right comment": "key(r)",
            "next [unresolved] discussion": "key(n)",
            "previous [unresolved] discussion": "key(p)",
            "next file": "key(])",
            "previous file": "key([)",
            "back to files": "key(escape)",
            "open permalink": "key(y)",
            "edit page": "key(e)"
        }
    },
    {
        "file": "apps/web/outlook.talon",
        "context": "outlook",
        "commands": {
            "new message": "key(n)",
            "send [this] message": "key(alt-s)",
            "reply [to] [this] message": "key(r)",
            "reply all [to] [this] message": "key(ctrl-shift-r)",
            "forward [this] message": "key(ctrl-shift-f)",
            "save [draft]": "key(ctrl-s)",
            "discard [draft]": "key(esc)",
            "insert [a] [hyper] link": "key(ctrl-k)",
            "(select|unselect) [this] message": "key(ctrl-space)",
            "select all [messages]": "key(ctrl-a)",
            "clear all [messages]": "key(esc)",
            "select first [message]": "key(home)",
            "select last [message]": "key(and)",
            "open [this] message": "key(o)",
            "open [this] message [in] [a] new window": "key(shift-enter)",
            "close [this] message": "key(esc)",
            "[open] [the] next (item|message)": "key(ctrl-.)",
            "[open] [the] (prev|previous) item": "key(ctrl-,)",
            "next reading [pane] (item|message)": "key(.)",
            "(prev|previous) [pane] (item|message)": "key(,)",
            "(expand|collapse) [conversation]": "key(x)",
            "go [to] mail": "key(ctrl-shift-1)",
            "go [to] calendar": "key(ctrl-shift-2)",
            "go [to] people": "key(ctrl-shift-3)",
            "go [to] to do": "key(ctrl-shift-4)",
            "go [to] inbox": "key(g)\n\t\tkey(i)",
            "go to drafts": "key(g)\n\t\tkey(d)",
            "go to sent": "key(g)\n\t\tkey(s)",
            "search [email]": "key(alt-q)",
            "show help": "key(?)",
            "undo [last] [action]": "key(ctrl-z)",
            "delete [this] [message]": "key(delete)",
            "(perm|permanently) delete [this] [message]": "key(shift+delete)",
            "new folder": "key(shift-e)",
            "mark [this] [(item|message)] as read": "key(q)",
            "mark [this] [(item|message)] as unread": "key(u)",
            "flag [this] [(item|message)]": "key(insert)",
            "archive": "key(e)",
            "mark [this] [message] [as] junk": "key(j)",
            "moved to [a] folder": "key(v)",
            "categorize [this] message": "key(c)"
        }
    },
    {
        "file": "apps/web/protonmail.talon",
        "context": "protonmail",
        "commands": {
            "open help": "key(?)",
            "[focus] search": "key(/)",
            "confirm active": "key(enter)",
            "close active": "key(escape)",
            "open command [palette]": "key(shift-space)",
            "new message": "key(c)",
            "send message": "key(ctrl-enter)",
            "save message": "key(ctrl-s)",
            "(go|jump) [to] inbox": "key(g)\n\t\tkey(i)",
            "(go|jump) [to] draft": "key(g)\n\t\tkey(d)",
            "(go|jump) [to] sent": "key(g)\n\t\tkey(s)",
            "(go|jump) [to] starred": "key(g)\n\t\tkey(.)",
            "(go|jump) [to] archive": "key(g)\n\t\tkey(a)",
            "(go|jump) [to] spam": "key(g)\n\t\tkey(x)",
            "(go|jump) [to] trash": "key(g)\n\t\tkey(t)\n\t\t\n\t\t## Navigation",
            "(prev|previous) message": "key(up)",
            "next message": "key(down)",
            "exit message": "key(left)",
            "enter message": "key(right)",
            "(show|display) newer [message]": "key(k)",
            "(show|display) older [message]": "key(j)",
            "open message": "key(enter)",
            "go back": "key(escape)",
            "select all": "key(*)\n\t\tkey(a)",
            "(deselect|unselect) all": "key(*)\n\t\tkey(n)",
            "select [the] (message|conversation)": "key(x)",
            "mark [as] read": "key(r)",
            "mark [as] unread": "key(u)",
            "star (message|conversation)": "key(.)",
            "move to inbox": "key(i)",
            "move to trash": "key(t)",
            "move to archive": "key(a)",
            "move to spam": "key(s)",
            "reply to (message|conversation)": "key(shift-r)",
            "reply all [to] (message|conversation)": "key(shift-a)",
            "forward (message|conversation)": "key(shift-f)",
            "(prev|previous) contact": "key(up)",
            "next contact": "key(down)",
            "enter contact": "key(right)",
            "delete contact": "key(t)",
            "exit contact": "key(left)",
            "save contact": "key(ctrl-s)"
        }
    },
    {
        "file": "apps/web/twitter.talon",
        "context": "twitter",
        "commands": {
            "(show shortcuts|shortcuts help)": "key(?)",
            "next tweet": "key(j)",
            "previous tweet": "key(k)",
            "page down": "key(space)",
            "load new tweet": "key(.)",
            "go home": "insert(\"gh\")",
            "go explore": "insert(\"ge\")",
            "go notifications": "insert(\"gn\")",
            "go mentions": "insert(\"gr\")",
            "go profile": "insert(\"gp\")",
            "go likes": "insert(\"gl\")",
            "go lists": "insert(\"gi\")",
            "go direct messages": "insert(\"gm\")",
            "go settings": "insert(\"gs\")",
            "go book marks": "insert(\"gb\")",
            "go to user": "insert(\"gu\")",
            "display settings": "insert(\"gd\")",
            "new tweet": "key(n)",
            "send tweet": "key(ctrl-enter)",
            "new direct message": "key(m)",
            "search": "key(/)",
            "like message": "key(l)",
            "reply message": "key(r)",
            "re tweet [message]": "key(t)",
            "share tweet": "key(s)",
            "bookmark": "key(b)",
            "mute account": "key(urge)",
            "block account": "key(x)",
            "open details": "key(enter)",
            "expand photo": "key(o)"
        }
    },
    {
        "file": "apps/windbg/windbg.talon",
        "context": "windbg",
        "commands": {
            "register <user.registers>": "key(@)\n\t\tinsert(\"{registers}\")\n\t\t",
            "open help": "insert(\".hh\\n\")",
            "add microsoft symbols": "insert(\"srv*C:\\\\symbols*http://msdl.microsoft.com/download/symbols;\\n\")",
            "force reload symbols": "insert(\".reload /f\\n\")",
            "reload symbols": "insert(\".reload\\n\")",
            "loaded modules": "insert(\"lm l\\n\")\n\t\t",
            "display pointers": "insert(\"dps \")\n\t\t\n\t\t# XXX - should be generic",
            "dereference pointer": "insert(\"poi()\")\n\t\tedit.left()\n\t\t",
            "show version": "key(ctrl-alt-w)",
            "view command": "key(alt-1)",
            "view watch": "key(alt-2)",
            "view locals": "key(alt-3)",
            "view registers": "key(alt-4)",
            "view memory": "key(alt-5)",
            "view call stack": "key(alt-6)",
            "view disassembly": "key(alt-7)",
            "view scratch pad": "key(alt-8)",
            "view (processes|threads)": "key(alt-9)",
            "dump function params": "\"r @rcx,@rdx,@r8,@r9\\n\"",
            "(lib|library) <user.windows_dlls>": "\"{windows_dlls}\""
        }
    },
    {
        "file": "draft_editor/draft_editor.talon",
        "context": "draft editor",
        "commands": {
            "draft this": "user.draft_editor_open()\n\t\t",
            "draft all": "edit.select_all()\n\t\tuser.draft_editor_open()\n\t\t",
            "draft line": "edit.select_line()\n\t\tuser.draft_editor_open()"
        }
    },
    {
        "file": "draft_editor/draft_editor_open.talon",
        "context": "draft editor open",
        "commands": {
            "draft submit": "user.draft_editor_submit()",
            "draft discard": "user.draft_editor_discard()"
        }
    },
    {
        "file": "emoji/emoji.talon",
        "context": "emoji",
        "commands": {
            "emoticon {user.emoticon}": "\"{emoticon}\"",
            "emoji {user.emoji}": "user.paste(emoji)",
            "kaomoji {user.kaomoji}": "user.paste(kaomoji)"
        }
    },
    {
        "file": "lang/batch/batch.talon",
        "context": "batch",
        "commands": {
            "soft exit": "\"exit /B 1\\n\"",
            "hard exit": "\"exit 1\\n\"",
            "echo": "\"echo \"",
            "echo off": "\"@echo off\\n\"",
            "call": "\"call \"",
            "call shell": "\"call cmd \\\\c \"",
            "if error": "\"if errorlevel 1 \"",
            "go to": "\"goto \"",
            "delayed expansion": "\"SETLOCAL EnableDelayedExpansion\\n\"",
            "arg <number_small>": "\"%{number_small}\""
        }
    },
    {
        "file": "lang/c/c.talon",
        "context": "c",
        "commands": {
            "funky <user.text>": "user.code_default_function(text)",
            "static funky <user.text>": "user.code_private_static_function(text)",
            "state include": "insert('#include ')",
            "state include system": "insert('#include <>')\n\t\tedit.left()",
            "state include local": "insert('#include \"\"')\n\t\tedit.left()",
            "state type deaf": "insert('typedef ')",
            "state type deaf struct": "insert('typedef struct')\n\t\tinsert('{\\n\\n}')\n\t\tedit.up()\n\t\tkey('tab')\n\t\t\n\t\t\n\t\t# XXX - create a preprocessor tag for these, as they will match cpp, etc",
            "state define": "\"#define \"",
            "state undefine": "\"#undef \"",
            "state if define": "\"#ifdef \"",
            "state pre if": "\"#if \"",
            "state error": "\"#error \"",
            "state pre else if": "\"#elif \"",
            "state pre end": "\"#endif \"",
            "state pragma": "\"#pragma \"",
            "state default": "\"default:\\nbreak;\"",
            "push brackets": "edit.line_end()\n\t\t#insert(\"{\")\n\t\t#key(enter)\n\t\tinsert(\"{}\")\n\t\tedit.left()\n\t\tkey(enter)\n\t\tkey(enter)\n\t\tedit.up()\n\t\t\n\t\t# Declare variables or structs etc.\n\t\t# Ex. * int myList",
            "<user.c_variable> <phrase>": "insert(\"{c_variable} \")\n\t\tinsert(user.formatted_text(phrase, \"PRIVATE_CAMEL_CASE,NO_SPACES\"))\n\t\t",
            "<user.c_variable> <user.letter>": "insert(\"{c_variable} {letter} \")\n\t\t\n\t\t# Ex. (int *)",
            "cast to <user.c_cast>": "\"{c_cast}\"",
            "standard cast to <user.stdint_cast>": "\"{stdint_cast}\"",
            "<user.c_types>": "\"{c_types}\"",
            "<user.c_pointers>": "\"{c_pointers}\"",
            "<user.c_keywords>": "\"{c_keywords}\"",
            "<user.c_signed>": "\"{c_signed}\"",
            "standard <user.stdint_types>": "\"{stdint_types}\"",
            "int main": "insert(\"int main()\")\n\t\tedit.left()\n\t\t",
            "toggle includes": "user.code_toggle_libraries()",
            "include <user.code_libraries>": "user.code_insert_library(code_libraries, \"\")\n\t\tkey(end enter)"
        }
    },
    {
        "file": "lang/go/go.talon",
        "context": "go",
        "commands": {
            "variadic": "\"...\"",
            "logical and": "\" && \"",
            "logical or": "\" || \"",
            "state comment": "\"// \"",
            "[line] comment <user.text>": "key(\"cmd-right\")\n\t\tinsert(\" // \")\n\t\tinsert(user.formatted_text(text, \"sentence\"))\n\t\t\n\t\t# \"add comment <user.text> [over]:\n\t\t#     key(\"cmd-right\")\n\t\t#     text_with_leading(\" // \")\n\t\t# ]\n\t\t# \"[state] context: insert(\"ctx\")",
            "state (funk | func | fun)": "\"func \"",
            "function (Annette | init) [over]": "\"func init() {\\n\"",
            "function <user.text> [over]": "insert(\"func \")\n\t\tinsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n\t\tinsert(\"(\")\n\t\tsleep(100ms)\n\t\t",
            "method <user.text> [over]": "insert(\"meth \")\n\t\tinsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n\t\tsleep(100ms)\n\t\t",
            "state var": "\"var \"",
            "variable [<user.text>] [over]": "insert(\"var \")\n\t\tinsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n\t\t# insert(\" \")\n\t\tsleep(100ms)\n\t\t",
            "of type [<user.text>] [over]": "insert(\" \")\n\t\tinsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n\t\t\n\t\t# \"set <user.text> [over]:\n\t\t#     insert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n\t\t#     insert(\" := \")\n\t\t#     sleep(100ms)\n\t\t# ]",
            "state break": "\"break\"",
            "state (chan | channel)": "\" chan \"",
            "state go": "\"go \"",
            "state if": "\"if \"",
            "if <user.text> [over]": "insert(\"if \")\n\t\tinsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))",
            "spawn <user.text> [over]": "insert(\"go \")\n\t\tinsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))",
            "state else if": "\" else if \"",
            "else if <user.text> [over]": "insert(\" else if \")\n\t\tinsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n\t\t",
            "state else": "\" else \"",
            "else <user.text> [over]": "insert(\" else {\")\n\t\tkey(\"enter\")\n\t\tinsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n\t\t",
            "state while": "\"while \"",
            "while <user.text> [over]": "insert(\"while \")\n\t\tinsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n\t\t",
            "state for": "\"for \"",
            "for <user.text> [over]": "insert(\"for \")\n\t\tinsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n\t\t",
            "state for range": "\"forr \"",
            "range <user.text> [over]": "insert(\"forr \")\n\t\tinsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n\t\t",
            "state format": "\"fmt\"",
            "format <user.text> [over]": "insert(\"fmt.\")\n\t\tinsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))\n\t\t",
            "state switch": "\"switch \"",
            "switch <user.text> [over]": "insert(\"switch \")\n\t\tinsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n\t\t",
            "state select": "\"select \"",
            "state (const | constant)": "\" const \"",
            "constant <user.text> [over]": "insert(\"const \")\n\t\tinsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))\n\t\t",
            "state case": "\" case \"",
            "state default": "\" default:\"",
            "case <user.text> [over]": "insert(\"case \")\n\t\tinsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n\t\t",
            "state type": "\" type \"",
            "type <user.text> [over]": "insert(\"type \")\n\t\tinsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))",
            "state true": "\" true \"",
            "state false": "\" false \"",
            "state (start | struct | struck)": "insert(\" struct {\")\n\t\tkey(\"enter\")",
            "(struct | struck) <user.text> [over]": "insert(\" struct {\")\n\t\tkey(\"enter\")\n\t\tinsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))\n\t\t",
            "[state] empty interface": "\" interface{} \"",
            "state interface": "insert(\" interface {\")\n\t\tkey(\"enter\")",
            "interface <user.text> [over]": "insert(\" interface {\")\n\t\tkey(\"enter\")\n\t\tinsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))\n\t\t",
            "state string": "\" string \"",
            "[state] (int | integer | ant)": "\"int\"",
            "state slice": "\" []\"",
            "slice of": "\"[]\"",
            "[state] (no | nil)": "\"nil\"",
            "state (int | integer | ant) 64": "\" int64 \"",
            "state tag": "insert(\" ``\")\n\t\tkey(\"left\")",
            "field tag <user.text> [over]": "insert(\" ``\")\n\t\tkey(\"left\")\n\t\tsleep(100ms)\n\t\tinsert(user.formatted_text(text, \"snake\"))\n\t\tinsert(\" \")\n\t\tsleep(100ms)\n\t\t",
            "state return": "\" return \"",
            "return  <user.text> [over]": "insert(\"return \")\n\t\tinsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n\t\t",
            "map of string to string": "\" map[string]string \"",
            "map of <user.text> [over]": "insert(\"map[\")\n\t\tinsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n\t\tkey(\"right\")\n\t\tsleep(100ms)\n\t\t",
            "receive": "\" <- \"",
            "make": "\"make(\"",
            "loggers [<user.text>] [over]": "insert(\"logrus.\")\n\t\tinsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))\n\t\t",
            "length <user.text> [over]": "insert(\"len(\")\n\t\tinsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n\t\t",
            "append <user.text> [over]": "insert(\"append(\")\n\t\tinsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n\t\t",
            "state (air | err)": "\"err\"",
            "error": "\" err \"",
            "loop over [<user.text>] [over]": "insert(\"forr \")\n\t\tinsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n\t\t",
            "item <user.text> [over]": "insert(\", \")\n\t\tinsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n\t\t",
            "value <user.text> [over]": "insert(\": \")\n\t\tinsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n\t\t",
            "address of [<user.text>] [over]": "insert(\"&\")\n\t\tinsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n\t\t",
            "pointer to [<user.text>] [over]": "insert(\"*\")\n\t\tinsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\n\t\t",
            "swipe [<user.text>] [over]": "key(\"right\")\n\t\tinsert(\", \")\n\t\tinsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
        }
    },
    {
        "file": "lang/java/java.talon",
        "context": "java",
        "commands": {
            "boxed [type] {user.java_boxed_type}": "insert(user.java_boxed_type + \" \")\n\t\t",
            "generic [type] {user.java_generic_data_structure}": "insert(java_generic_data_structure)\n\t\tinsert(\"<>\")\n\t\tkey(\"left\")\n\t\t\n\t\t# Arrays",
            "type {user.code_type} array": "insert(user.code_type)\n\t\tuser.code_operator_subscript()\n\t\t",
            "[state] {user.java_modifier}": "insert(user.java_modifier + \" \")\n\t\t",
            "op array": "user.code_operator_subscript()\n\t\t",
            "op new": "insert(\"new \")"
        }
    },
    {
        "file": "lang/javascript/javascript.talon",
        "context": "javascript",
        "commands": {
            "(op | is) strict equal": "\" === \"",
            "(op | is) strict not equal": "\" !== \"",
            "state const": "\"const \"",
            "state let": "\"let \"",
            "state var": "\"var \"",
            "state export": "\"export \"",
            "state async": "\"async \"",
            "state await": "\"await \"",
            "state map": "insert(\".map()\")\n\t\tkey(left)\n\t\t",
            "state filter": "insert(\".filter()\")\n\t\tkey(left)\n\t\t",
            "state reduce": "insert(\".reduce()\")\n\t\tkey(left)\n\t\t",
            "state spread": "\"...\"",
            "from import": "insert(' from  \"\"')\n\t\tkey(\"left\")"
        }
    },
    {
        "file": "lang/markdown/markdown.talon",
        "context": "markdown",
        "commands": {
            "level one": "\"# \"",
            "level two": "\"## \"",
            "level three": "\"### \"",
            "level four": "\"#### \"",
            "level five": "\"##### \"",
            "level six": "\"###### \"",
            "{user.markdown_code_block_language} block": "\"```{markdown_code_block_language}\"\n\t\tkey(enter:2)\n\t\t\"```\"\n\t\tkey(up)"
        }
    },
    {
        "file": "lang/php/php.talon",
        "context": "php",
        "commands": {
            "(op | is) loosely equal": "\" == \"",
            "(op | is) loosely not equal": "\" != \"",
            "state try": "\"try {\\n\"",
            "state catch": "\"catch (\\\\Throwable $exception) {\\n\"",
            "var <phrase> [over]": "insert(\"$\")\n\t\tinsert(user.formatted_text(phrase, \"PRIVATE_CAMEL_CASE\"))"
        }
    },
    {
        "file": "lang/python/python.talon",
        "context": "python",
        "commands": {
            "dunder in it": "\"__init__\"",
            "state (def | deaf | deft)": "\"def \"",
            "state try": "\"try:\\n\"",
            "state except": "\"except \"",
            "state raise": "\"raise \"",
            "self taught": "\"self.\"",
            "pie test": "\"pytest\"",
            "state past": "\"pass\"",
            "raise {user.python_exception}": "user.insert_cursor(\"raise {python_exception}([|])\")",
            "except {user.python_exception}": "\"except {python_exception}:\"",
            "dock string": "user.code_comment_documentation()",
            "dock {user.python_docstring_fields}": "insert(\"{python_docstring_fields}\")\n\t\tedit.left()",
            "dock type {user.code_type}": "user.insert_cursor(\":type [|]: {code_type}\")",
            "dock returns type {user.code_type}": "user.insert_cursor(\":rtype [|]: {code_type}\")\n\t\t",
            "toggle imports": "user.code_toggle_libraries()",
            "import <user.code_libraries>": "user.code_insert_library(code_libraries, \"\")\n\t\tkey(end enter)\n\t\t",
            "from import": "insert('from import ')\n\t\tkey('left')\n\t\tedit.word_left()\n\t\tkey('space')\n\t\tedit.left()"
        }
    },
    {
        "file": "lang/r/r.talon",
        "context": "r",
        "commands": {
            "(op | is) in": "\" %in% \"",
            "toggle library": "user.code_toggle_libraries()",
            "library <user.code_libraries>": "user.code_insert_library(code_libraries, \"\")\n\t\tkey(end enter)\n\t\t\n\t\t# R specific commands",
            "(chain|pipe that)": "key(end)\n\t\t\" %>%\"\n\t\tkey(enter)",
            "state na": "insert(\"NA\")\n\t\t\n\t\t# TODO: migrate to function tag",
            "function define <user.text>": "user.code_private_function(text)",
            "named arg {user.code_parameter_name}": "user.code_insert_named_argument(code_parameter_name)"
        }
    },
    {
        "file": "lang/ruby/ruby.talon",
        "context": "ruby",
        "commands": {
            "args pipe": "insert(\"||\")\n\t\tkey(left)\n\t\t\n\t\t# NOTE: this command is created for backward compatibility, but the documentation comments are not actually strings in Ruby.",
            "dock string": "user.code_comment_documentation()\n\t\t",
            "state end": "\"end\"",
            "state begin": "\"begin\"",
            "state rescue": "\"rescue \"",
            "state module": "\"module \"",
            "instance <user.text>": "insert(\"@\")\n\t\tuser.code_public_variable_formatter(text)"
        }
    },
    {
        "file": "lang/rust/rust.talon",
        "context": "rust",
        "commands": {
            "state unsafe": "\"unsafe \"",
            "state struct <user.text>": "insert(\"struct \")\n\t\tinsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))\n\t\t",
            "state enum <user.text>": "insert(\"enum \")\n\t\tinsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))\n\t\t",
            "toggle use": "user.code_toggle_libraries()",
            "state pub": "\"pub \"",
            "state pub crate": "\"pub(crate) \"",
            "state dyn": "\"dyn \"",
            "state imp": "\"impl \"",
            "state let mute": "\"let mut \"",
            "state let": "\"let \"",
            "state mute": "\"mut \"",
            "state ref mute": "\"ref mut \"",
            "state ref": "\"ref \"",
            "state trait": "\"trait \"",
            "state match": "\"match \"",
            "op arrow": "\" -> \"",
            "op dub arrow": "\" => \"",
            "state use": "\"use \"",
            "use <user.code_libraries>": "user.code_insert_library(code_libraries, \"\")\n\t\tkey(semicolon enter)"
        }
    },
    {
        "file": "lang/scala/scala.talon",
        "context": "scala",
        "commands": {
            "state package": "\"package \"",
            "state val": "\"val \"",
            "state var": "\"var \"",
            "state match": "user.code_state_switch()",
            "state case class": "\"case class \"",
            "state object": "\"object \"",
            "block string": "insert('\"\"\"\"\"\"')\n\t\tkey(\"left left left\")"
        }
    },
    {
        "file": "lang/sql/sql.talon",
        "context": "sql",
        "commands": {
            "select": "\"SELECT \"",
            "star": "\"*\"",
            "from": "\"FROM \"",
            "select star from": "\"SELECT * FROM \"",
            "where": "\"WHERE \"",
            "order by": "\"ORDER BY \"",
            "descending": "\" DESC\"",
            "ascending": "\" ASC\"",
            "dot i d": "\".id\"",
            "is not null": "\" IS NOT NULL\"",
            "is null": "\" IS NULL\"",
            "inner join": "insert(\"INNER JOIN  ON \")\n\t\tkey(left)\n\t\tkey(left)\n\t\tkey(left)\n\t\tkey(left)"
        }
    },
    {
        "file": "lang/tags/comment_block.talon",
        "context": "comment block",
        "commands": {
            "block comment": "user.code_comment_block()",
            "block comment line": "#todo: this should probably be a single function once\n\t\t#.talon supports implementing actions with parameters?\n\t\tedit.line_start()\n\t\tuser.code_comment_block_prefix()\n\t\tkey(space)\n\t\tedit.line_end()\n\t\tkey(space)\n\t\tuser.code_comment_block_suffix()\n\t\t#adds comment to the start of the line",
            "block comment line <user.text> over": "#todo: this should probably be a single function once\n\t\t#.talon supports implementing actions with parameters?\n\t\tedit.line_start()\n\t\tuser.code_comment_block()\n\t\tinsert(user.text)",
            "block comment <user.text> over": "#todo: this should probably be a single function once\n\t\t#.talon supports implementing actions with parameters?\n\t\tuser.code_comment_block()\n\t\tinsert(user.text)",
            "block comment <user.text>": "#todo: this should probably be a single function once\n\t\t#.talon supports implementing actions with parameters?\n\t\tuser.code_comment_block()\n\t\tinsert(user.text)",
            "(line | inline) block comment <user.text> over": "#todo: this should probably be a single function once\n\t\t#.talon supports implementing actions with parameters?\n\t\tedit.line_end()\n\t\tuser.code_comment_block_prefix()\n\t\tkey(space)\n\t\tinsert(user.text)\n\t\tkey(space)\n\t\tuser.code_comment_block_suffix()",
            "(line | inline) block comment <user.text>": "#todo: this should probably be a single function once\n\t\t#.talon supports implementing actions with parameters?\n\t\tedit.line_end()\n\t\tuser.code_comment_block_prefix()\n\t\tkey(space)\n\t\tinsert(user.text)\n\t\tkey(space)\n\t\tuser.code_comment_block_suffix()",
            "open block comment": "user.code_comment_block_prefix()",
            "close block comment": "user.code_comment_block_suffix()"
        }
    },
    {
        "file": "lang/tags/comment_documentation.talon",
        "context": "comment documentation",
        "commands": {
            "dock comment": "user.code_comment_documentation()"
        }
    },
    {
        "file": "lang/tags/comment_line.talon",
        "context": "comment line",
        "commands": {
            "comment": "user.code_comment_line_prefix()",
            "comment line": "#todo: this should probably be a single function once\n\t\t#.talon supports implementing actions with parameters?\n\t\tedit.line_start()\n\t\tuser.code_comment_line_prefix()\n\t\t#adds comment to the start of the line",
            "comment line <user.text> over": "#todo: this should probably be a single function once\n\t\t#.talon supports implementing actions with parameters?\n\t\tedit.line_start()\n\t\tuser.code_comment_line_prefix()\n\t\tinsert(user.text)\n\t\tinsert(\" \")",
            "comment <user.text> over": "#todo: this should probably be a single function once\n\t\t#.talon supports implementing actions with parameters?\n\t\tuser.code_comment_line_prefix()\n\t\tinsert(user.text)",
            "comment <user.text>": "#todo: this should probably be a single function once\n\t\t#.talon supports implementing actions with parameters?\n\t\tuser.code_comment_line_prefix()\n\t\tinsert(user.text)",
            "(line | inline) comment <user.text> over": "#todo: this should probably be a single function once\n\t\t#.talon supports implementing actions with parameters?\n\t\tedit.line_end()\n\t\tuser.code_comment_line_prefix()\n\t\tinsert(user.text)",
            "(line | inline) comment <user.text>": "#todo: this should probably be a single function once\n\t\t#.talon supports implementing actions with parameters?\n\t\tedit.line_end()\n\t\tuser.code_comment_line_prefix()\n\t\tinsert(user.text)"
        }
    },
    {
        "file": "lang/tags/data_bool.talon",
        "context": "data bool",
        "commands": {
            "state true": "user.code_insert_true()",
            "state false": "user.code_insert_false()"
        }
    },
    {
        "file": "lang/tags/data_null.talon",
        "context": "data null",
        "commands": {
            "state (no | nil | null)": "user.code_insert_null()",
            "is not (none|null)": "user.code_insert_is_not_null()",
            "is (none|null)": "user.code_insert_is_null()"
        }
    },
    {
        "file": "lang/tags/functions.talon",
        "context": "functions",
        "commands": {
            "funky <user.text>": "user.code_default_function(text)",
            "pro funky <user.text>": "user.code_protected_function(text)",
            "pub funky <user.text>": "user.code_public_function(text)",
            "static funky <user.text>": "user.code_private_static_function(text)",
            "pro static funky <user.text>": "user.code_protected_static_function(text)",
            "pub static funky <user.text>": "user.code_public_static_function(text)",
            "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
            "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)",
            "type {user.code_type}": "insert(\"{code_type}\")"
        }
    },
    {
        "file": "lang/tags/functions_gui.talon",
        "context": "functions gui",
        "commands": {
            "toggle funk": "user.code_toggle_functions()",
            "funk <user.code_functions>": "user.code_insert_function(code_functions, \"\")",
            "funk cell <number>": "user.code_select_function(number - 1, \"\")",
            "funk wrap <user.code_functions>": "user.code_insert_function(code_functions, edit.selected_text())",
            "funk wrap <number>": "user.code_select_function(number - 1, edit.selected_text())"
        }
    },
    {
        "file": "lang/tags/functions_gui_open.talon",
        "context": "functions gui open",
        "commands": {
            "toggle funk": "user.code_toggle_functions()"
        }
    },
    {
        "file": "lang/tags/imperative.talon",
        "context": "imperative",
        "commands": {
            "block": "user.code_block()",
            "state if": "user.code_state_if()",
            "state else if": "user.code_state_else_if()",
            "state else": "user.code_state_else()",
            "state while": "user.code_state_while()",
            "state for": "user.code_state_for()",
            "state for in": "user.code_state_for_each()",
            "state switch": "user.code_state_switch()",
            "state case": "user.code_state_case()",
            "state do": "user.code_state_do()",
            "state goto": "user.code_state_go_to()",
            "state return": "user.code_state_return()",
            "state break": "user.code_break()",
            "state next": "user.code_next()"
        }
    },
    {
        "file": "lang/tags/libraries.talon",
        "context": "libraries",
        "commands": {
            "state import": "user.code_import()"
        }
    },
    {
        "file": "lang/tags/library_gui_open.talon",
        "context": "library gui open",
        "commands": {
            "toggle libraries close": "user.code_toggle_libraries()"
        }
    },
    {
        "file": "lang/tags/object_oriented.talon",
        "context": "object oriented",
        "commands": {
            "self dot": "user.code_self()\n\t\tuser.code_operator_object_accessor()\n\t\t",
            "state self": "user.code_self()\n\t\t",
            "state class": "user.code_define_class()"
        }
    },
    {
        "file": "lang/tags/operators_array.talon",
        "context": "operators array",
        "commands": {
            "op subscript": "user.code_operator_subscript()"
        }
    },
    {
        "file": "lang/tags/operators_assignment.talon",
        "context": "operators assignment",
        "commands": {
            "op (equals | assign)": "user.code_operator_assignment()",
            "op (minus | subtract) equals": "user.code_operator_subtraction_assignment()",
            "op (plus | add) equals": "user.code_operator_addition_assignment()",
            "op (times | multiply) equals": "user.code_operator_multiplication_assignment()",
            "op divide equals": "user.code_operator_division_assignment()",
            "op mod equals": "user.code_operator_modulo_assignment()",
            "[op] increment": "user.code_operator_increment()",
            "(op | logical | bitwise) (ex | exclusive) or equals": "user.code_operator_bitwise_exclusive_or_equals()",
            "[(op | logical | bitwise)] (left shift | shift left) equals": "user.code_operator_bitwise_left_shift_equals()",
            "[(op | logical | bitwise)] (left right | shift right) equals": "user.code_operator_bitwise_right_shift_equals()"
        }
    },
    {
        "file": "lang/tags/operators_bitwise.talon",
        "context": "operators bitwise",
        "commands": {
            "[op] bitwise and": "user.code_operator_bitwise_and()",
            "[op] bitwise or": "user.code_operator_bitwise_or()",
            "(op | logical | bitwise) (ex | exclusive) or": "user.code_operator_bitwise_exclusive_or()",
            "(op | logical | bitwise) (left shift | shift left)": "user.code_operator_bitwise_left_shift()",
            "(op | logical | bitwise) (right shift | shift right)": "user.code_operator_bitwise_right_shift()"
        }
    },
    {
        "file": "lang/tags/operators_lambda.talon",
        "context": "operators lambda",
        "commands": {
            "op lambda": "user.code_operator_lambda()"
        }
    },
    {
        "file": "lang/tags/operators_math.talon",
        "context": "operators math",
        "commands": {
            "op (minus | subtract)": "user.code_operator_subtraction()",
            "op (plus | add)": "user.code_operator_addition()",
            "op (times | multiply)": "user.code_operator_multiplication()",
            "op divide": "user.code_operator_division()",
            "op mod": "user.code_operator_modulo()",
            "(op (power | exponent) | to the power [of])": "user.code_operator_exponent()",
            "(op | is) equal": "user.code_operator_equal()",
            "(op | is) not equal": "user.code_operator_not_equal()",
            "(op | is) (greater | more)": "user.code_operator_greater_than()",
            "(op | is) (less | below) [than]": "user.code_operator_less_than()",
            "(op | is) greater [than] or equal": "user.code_operator_greater_than_or_equal_to()",
            "(op | is) less [than] or equal": "user.code_operator_less_than_or_equal_to()",
            "(op | logical) and": "user.code_operator_and()",
            "(op | logical) or": "user.code_operator_or()",
            "(op | pad) colon": "\" : \""
        }
    },
    {
        "file": "lang/tags/operators_pointer.talon",
        "context": "operators pointer",
        "commands": {
            "op dereference": "user.code_operator_indirection()",
            "op address of": "user.code_operator_address_of()",
            "op arrow": "user.code_operator_structure_dereference()"
        }
    },
    {
        "file": "lang/talon/talon.talon",
        "context": "talon",
        "commands": {
            "dot talon": "insert(\".talon\")",
            "action block": "insert(\"action():\")\n\t\tedit.left()\n\t\tedit.left()",
            "setting block": "insert(\"settings():\\n\\t\")",
            "setting {user.talon_settings}": "user.paste(\"{talon_settings} = \")\n\t\t#context requirements",
            "win require": "insert(\"os: windows\\n\")",
            "mac require": "insert(\"os: mac\\n\")",
            "linux require": "insert(\"os: linux\\n\")",
            "title require": "insert(\"win.title: \")",
            "application [require] [{user.talon_apps}]": "app = talon_apps or \"\"\n\t\tuser.paste(\"app: {app}\")",
            "mode require [{user.talon_modes}]": "mode = talon_modes or \"\"\n\t\tuser.paste(\"mode: {mode}\")",
            "tag require [{user.talon_tags}]": "tag = talon_tags or \"\"\n\t\tuser.paste(\"tag: {tag}\")",
            "tag set [{user.talon_tags}]": "tag = talon_tags or \"\"\n\t\tuser.paste(\"tag(): {tag}\")\n\t\t# requires user.talon_populate_lists tag. do not use with dragon",
            "list {user.talon_lists}": "\"{{{talon_lists}}}\"",
            "capture {user.talon_captures}": "\"<{talon_captures}>\"",
            "key <user.keys> over": "\"{keys}\"",
            "key <user.modifiers> over": "\"{modifiers}\"",
            "funk <user.code_functions>": "user.code_insert_function(code_functions, \"\")\n\t\t\n\t\t# all actions (requires uncommenting user.talon_populate_lists tag above)",
            "funk {user.talon_actions}": "user.code_insert_function(talon_actions, edit.selected_text())",
            "funk cell <number>": "user.code_select_function(number - 1, \"\")",
            "funk wrap <user.code_functions>": "user.code_insert_function(code_functions, edit.selected_text())",
            "funk wrap <number>": "user.code_select_function(number - 1, edit.selected_text())"
        }
    },
    {
        "file": "apps/terraform/terraform.talon",
        "context": "terraform apps",
        "commands": {
            "terraform": "\"terraform \"",
            "terraform apply": "\"terraform apply \"",
            "terraform destroy": "\"terraform destroy \"",
            "terraform format recursive": "\"terraform fmt -recursive\\n\"",
            "terraform format": "\"terraform fmt\\n\"",
            "terraform help": "\"terraform -help\"",
            "terraform init upgrade": "\"terraform init -upgrade\\n\"",
            "terraform init": "\"terraform init\\n\"",
            "terraform plan": "\"terraform plan\\n\"",
            "terraform state move": "\"terraform state mv \"",
            "terraform validate": "\"terraform validate\\n\""
        }
    },
    {
        "file": "lang/terraform/terraform.talon",
        "context": "terraform lang",
        "commands": {
            "state {user.terraform_module_block}": "user.code_terraform_module_block(user.terraform_module_block)\n\t\t",
            "resource <user.text>": "user.code_terraform_resource(text)\n\t\t",
            "data [source] <user.text>": "user.code_terraform_data_source(text)\n\t\t",
            "[state] prop {user.terraform_common_property}": "insert(user.terraform_common_property)\n\t\tuser.code_operator_assignment()\n\t\t",
            "type {user.code_type}": "insert(\"{code_type}\")"
        }
    },
    {
        "file": "lang/vimscript/vimscript.talon",
        "context": "vimscript",
        "commands": {
            "assign [<user.vimscript_scope>] (variable|var) [<user.text>] [over]": "insert(\"let \")\n\t\tinsert(vimscript_scope or '')\n\t\tuser.code_private_variable_formatter(text)\n\t\t",
            "[<user.vimscript_scope>] (variable|var) [<user.text>] [over]": "insert(vimscript_scope or '')\n\t\tuser.code_private_variable_formatter(text)\n\t\t\n\t\t# see lang/vimscript/vimscript.py for list",
            "<user.vimscript_functions>": "insert(\"{vimscript_functions} \")\n\t\t\n\t\t# XXX - possibly overlap with some programming.talon",
            "state command": "\"command! \"",
            "state end if": "\"endif\"",
            "state end for": "\"endfor\"",
            "state end while": "\"endwhile\"",
            "state end function": "\"endfunction\"",
            "state continue": "\"continue\""
        }
    },
    {
        "file": "misc/abbreviate.talon",
        "context": "abbreviate",
        "commands": {
            "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
        }
    },
    {
        "file": "misc/cancel.talon",
        "context": "cancel",
        "commands": {
            "cancel cancel": "skip()",
            "ignore [<phrase>]": "app.notify(\"Command ignored\")"
        }
    },
    {
        "file": "misc/chapters.talon",
        "context": "chapters",
        "commands": {
            "chapter next": "user.chapter_next()",
            "chapter last": "user.chapter_previous()",
            "go chapter <number>": "user.chapter_jump(number)",
            "go chapter final": "user.chapter_final()"
        }
    },
    {
        "file": "misc/datetimeinsert.talon",
        "context": "datetimeinsert",
        "commands": {
            "date insert": "insert(user.time_format(\"%Y-%m-%d\"))",
            "date insert UTC": "insert(user.time_format_utc(\"%Y-%m-%d\"))",
            "timestamp insert": "insert(user.time_format(\"%Y-%m-%d %H:%M:%S\"))",
            "timestamp insert high resolution": "insert(user.time_format(\"%Y-%m-%d %H:%M:%S.%f\"))",
            "timestamp insert UTC": "insert(user.time_format_utc(\"%Y-%m-%d %H:%M:%S\"))",
            "timestamp insert UTC high resolution": "insert(user.time_format_utc(\"%Y-%m-%d %H:%M:%S.%f\"))"
        }
    },
    {
        "file": "misc/desktops.talon",
        "context": "desktops",
        "commands": {
            "desk <number_small>": "user.desktop(number_small)",
            "desk next": "user.desktop_next()",
            "desk last": "user.desktop_last()",
            "desk show": "user.desktop_show()",
            "window move desk <number>": "user.window_move_desktop(number)",
            "window move desk left": "user.window_move_desktop_left()",
            "window move desk right": "user.window_move_desktop_right()"
        }
    },
    {
        "file": "misc/extensions.talon",
        "context": "extensions",
        "commands": {
            "{user.file_extension}": "\"{file_extension}\""
        }
    },
    {
        "file": "misc/formatters.talon",
        "context": "formatters",
        "commands": {
            "phrase <user.text>": "user.insert_formatted(text, \"NOOP\")",
            "phrase <user.text> over": "user.insert_formatted(text, \"NOOP\")",
            "{user.prose_formatter} <user.prose>": "user.insert_formatted(prose, prose_formatter)",
            "{user.prose_formatter} <user.prose> over": "user.insert_formatted(prose, prose_formatter)",
            "<user.format_text>+": "user.insert_many(format_text_list)",
            "<user.format_text>+ over": "user.insert_many(format_text_list)",
            "<user.formatters> that": "user.formatters_reformat_selection(user.formatters)",
            "word <user.word>": "user.insert_formatted(user.word, \"NOOP\")",
            "recent list": "user.toggle_phrase_history()",
            "recent close": "user.phrase_history_hide()",
            "recent repeat <number_small>": "insert(user.get_recent_phrase(number_small))",
            "recent copy <number_small>": "clip.set_text(user.get_recent_phrase(number_small))",
            "select that": "user.select_last_phrase()",
            "before that": "user.before_last_phrase()",
            "nope that | scratch that": "user.clear_last_phrase()",
            "nope that was <user.formatters>": "user.formatters_reformat_last(formatters)"
        }
    },
    {
        "file": "misc/git.talon",
        "context": "git",
        "commands": {
            "git add patch": "\"git add . -p\\n\"",
            "git add": "\"git add \"",
            "git add everything": "\"git add -u\\n\"",
            "git bisect": "\"git bisect \"",
            "git blame": "\"git blame \"",
            "git branch": "\"git branch \"",
            "git remote branches": "\"git branch --remote\\n\"",
            "git branch <user.text>": "\"git branch {text}\"",
            "git checkout": "\"git checkout \"",
            "git checkout master": "\"git checkout master\\n\"",
            "git checkout main": "\"git checkout main\\n\"",
            "git checkout <user.text>": "\"git checkout {text}\"",
            "git cherry pick": "\"git cherry-pick \"",
            "git cherry pick continue": "\"git cherry-pick --continue \"",
            "git cherry pick abort": "\"git cherry-pick --abort \"",
            "git cherry pick skip": "\"git cherry-pick --skip \"",
            "git clone": "\"git clone \"",
            "git clean everything": "\"git clean -dfx\"",
            "git commit message <user.text>": "\"git commit -m '{text}'\"",
            "git commit": "\"git commit\\n\"",
            "git commit amend": "\"git commit --amend\\n\"",
            "git commit existing": "\"git commit -a\\n\"",
            "git diff (colour|color) words": "\"git diff --color-words \"",
            "git diff": "\"git diff \"",
            "git diff cached": "\"git diff --cached\\n\"",
            "git fetch": "\"git fetch\\n\"",
            "git fetch all": "\"git fetch --all\\n\"",
            "git fetch <user.text>": "\"git fetch {text}\"",
            "git fetch prune": "\"git fetch --prune\\n\"",
            "git in it": "\"git init\\n\"",
            "git log all": "\"git log\\n\"",
            "git log all changes": "\"git log -c\\n\"",
            "git log": "\"git log \"",
            "git log changes": "\"git log -c \"",
            "git merge": "\"git merge \"",
            "git merge <user.text>": "\"git merge {text}\"",
            "git move": "\"git mv \"",
            "git pull": "\"git pull\\n\"",
            "git pull origin": "\"git pull origin \"",
            "git pull rebase": "\"git pull --rebase\\n\"",
            "git pull fast forward": "\"git pull --ff-only\\n\"",
            "git pull <user.text>": "\"git pull {text} \"",
            "git push": "\"git push\\n\"",
            "git push origin": "\"git push origin \"",
            "git push up stream origin": "\"git push -u origin\"",
            "git push <user.text>": "\"git push {text} \"",
            "git push tags": "\"git push --tags\\n\"",
            "git rebase": "\"git rebase \"",
            "git rebase continue": "\"git rebase --continue\"",
            "git rebase skip": "\"git rebase --skip\"",
            "git remove": "\"git rm \"",
            "git (remove|delete) branch": "\"git branch -d \"",
            "git (remove|delete) remote branch": "\"git push --delete origin \"",
            "git reset": "\"git reset \"",
            "git reset soft": "\"git reset --soft \"",
            "git reset hard": "\"git reset --hard \"",
            "git restore": "\"git restore \"",
            "git restore staged": "\"git restore --staged \"",
            "git restore source": "\"git restore --source=\"",
            "git remote": "\"git remote \"",
            "git remote add": "\"git remote add \"",
            "git remote add upstream": "\"git remote add upstream \"",
            "git remote remove": "\"git remote remove \"",
            "git remote show origin": "\"git remote show origin\\n\"",
            "git show": "\"git show \"",
            "git stash pop": "\"git stash pop\\n\"",
            "git stash": "\"git stash\\n\"",
            "git stash apply": "\"git stash apply\\n\"",
            "git stash list": "\"git stash list\\n\"",
            "git stash show": "\"git stash show\"",
            "git status": "\"git status\\n\"",
            "git switch [<user.text>]": "\"git switch {user.formatted_text(text or '', 'DASH_SEPARATED')}\"",
            "git switch master": "\"git switch master \"",
            "git switch main": "\"git switch main \"",
            "git switch detached": "\"git switch --detach \"",
            "git (switch create | new branch) [<user.text>]": "\"git switch -c {user.formatted_text(text or '', 'DASH_SEPARATED')}\"",
            "git switch orphan": "\"git switch --orphan \"",
            "git submodule add": "\"git submodule add \"",
            "git tag": "\"git tag \"",
            "git edit config": "\"git config --local -e\\n\"",
            "git clone clipboard": "insert(\"git clone \")\n\t\tedit.paste()\n\t\tkey(enter)",
            "git diff highlighted": "edit.copy()\n\t\tinsert(\"git diff \")\n\t\tedit.paste()\n\t\tkey(enter)",
            "git diff clipboard": "insert(\"git diff \")\n\t\tedit.paste()\n\t\tkey(enter)",
            "git add highlighted": "edit.copy()\n\t\tinsert(\"git add \")\n\t\tedit.paste()\n\t\tkey(enter)",
            "git add clipboard": "insert(\"git add \")\n\t\tedit.paste()\n\t\tkey(enter)",
            "git commit highlighted": "edit.copy()\n\t\tinsert(\"git add \")\n\t\tedit.paste()\n\t\tinsert(\"\\ngit commit\\n\")"
        }
    },
    {
        "file": "misc/git_add_patch.talon",
        "context": "git add patch",
        "commands": {
            "yank": "key(y)\n\t\tkey(enter)",
            "near": "key(n)\n\t\tkey(enter)",
            "quench": "key(q)\n\t\tkey(enter)",
            "drum": "key(d)\n\t\tkey(enter)",
            "air": "key(a)\n\t\tkey(enter)"
        }
    },
    {
        "file": "misc/help.talon",
        "context": "help",
        "commands": {
            "help alphabet": "user.help_list(\"user.letter\")",
            "help symbols": "user.help_list(\"user.symbol_key\")",
            "help numbers": "user.help_list(\"user.number_key\")",
            "help punctuation": "user.help_list(\"user.punctuation\")",
            "help modifier": "user.help_list(\"user.modifier_key\")",
            "help special keys": "user.help_list(\"user.special_key\")",
            "help function keys": "user.help_list(\"user.function_key\")",
            "help arrows": "user.help_list(\"user.arrow_key\")",
            "(help formatters | help format | format help)": "user.help_formatters(user.get_formatters_words())",
            "help context": "user.help_context()",
            "help active": "user.help_context_enabled()",
            "help search <user.text>": "user.help_search(text)",
            "help context {user.help_contexts}": "user.help_selected_context(help_contexts)",
            "help help": "user.help_search(\"help\")",
            "help scope": "user.help_scope_toggle()"
        }
    },
    {
        "file": "misc/help_open.talon",
        "context": "help open",
        "commands": {
            "help next": "user.help_next()",
            "help previous": "user.help_previous()",
            "help <number>": "user.help_select_index(number - 1)",
            "help return": "user.help_return()",
            "help refresh": "user.help_refresh()",
            "help close": "user.help_hide()"
        }
    },
    {
        "file": "misc/help_scope_open.talon",
        "context": "help scope open",
        "commands": {
            "scope (hide | close)": "user.help_scope_toggle()"
        }
    },
    {
        "file": "misc/history.talon",
        "context": "history",
        "commands": {
            "command history": "user.history_toggle()",
            "command history close": "user.history_disable()",
            "command history clear": "user.history_clear()",
            "command history less": "user.history_less()",
            "command history more": "user.history_more()"
        }
    },
    {
        "file": "misc/keys.talon",
        "context": "keys",
        "commands": {
            "go <user.arrow_keys>": "user.move_cursor(arrow_keys)",
            "<user.letter>": "key(letter)",
            "(ship | uppercase) <user.letters> [(lowercase | sunk)]": "user.insert_formatted(letters, \"ALL_CAPS\")",
            "<user.symbol_key>": "key(symbol_key)",
            "<user.function_key>": "key(function_key)",
            "<user.special_key>": "key(special_key)",
            "<user.modifiers> <user.unmodified_key>": "key(\"{modifiers}-{unmodified_key}\")",
            "press <user.modifiers>": "key(modifiers)",
            "press <user.keys>": "key(keys)"
        }
    },
    {
        "file": "misc/macro.talon",
        "context": "macro",
        "commands": {
            "macro record": "user.macro_record()",
            "macro stop": "user.macro_stop()",
            "macro play": "user.macro_play()"
        }
    },
    {
        "file": "misc/media.talon",
        "context": "media",
        "commands": {
            "volume up": "key(volup)",
            "volume down": "key(voldown)",
            "set volume <number>": "user.media_set_volume(number)",
            "(volume|media) mute": "key(mute)",
            "[media] play next": "key(next)",
            "[media] play previous": "key(prev)",
            "media (play | pause)": "user.play_pause()"
        }
    },
    {
        "file": "misc/messaging.talon",
        "context": "messaging",
        "commands": {
            "previous (workspace | server)": "user.messaging_workspace_previous()",
            "next (workspace | server)": "user.messaging_workspace_next()",
            "channel": "user.messaging_open_channel_picker()",
            "channel <user.text>": "user.messaging_open_channel_picker()\n\t\tinsert(user.formatted_text(user.text, \"ALL_LOWERCASE\"))",
            "channel up": "user.messaging_channel_previous()",
            "channel down": "user.messaging_channel_next()",
            "([channel] unread last | gopreev)": "user.messaging_unread_previous()",
            "([channel] unread next | goneck)": "user.messaging_unread_next()",
            "go (find | search)": "user.messaging_open_search()",
            "mark (all | workspace | server) read": "user.messaging_mark_workspace_read()",
            "mark channel read": "user.messaging_mark_channel_read()",
            "upload file": "user.messaging_upload_file()"
        }
    },
    {
        "file": "misc/microphone_selection.talon",
        "context": "microphone selection",
        "commands": {
            "microphone show": "user.microphone_selection_toggle()",
            "microphone close": "user.microphone_selection_hide()",
            "microphone pick <number_small>": "user.microphone_select(number_small)"
        }
    },
    {
        "file": "misc/mouse.talon",
        "context": "mouse",
        "commands": {
            "control mouse": "user.mouse_toggle_control_mouse()",
            "zoom mouse": "user.mouse_toggle_zoom_mouse()",
            "camera overlay": "user.mouse_toggle_camera_overlay()",
            "run calibration": "user.mouse_calibrate()",
            "touch": "mouse_click(0)\n\t\t# close the mouse grid if open\n\t\tuser.grid_close()\n\t\t# End any open drags\n\t\t# Touch automatically ends left drags so this is for right drags specifically\n\t\tuser.mouse_drag_end()\n\t\t",
            "righty": "mouse_click(1)\n\t\t# close the mouse grid if open\n\t\tuser.grid_close()\n\t\t",
            "midclick": "mouse_click(2)\n\t\t# close the mouse grid\n\t\tuser.grid_close()\n\t\t\n\t\t#see keys.py for modifiers.\n\t\t#defaults\n\t\t#command\n\t\t#control\n\t\t#option = alt\n\t\t#shift\n\t\t#super = windows key",
            "<user.modifiers> touch": "key(\"{modifiers}:down\")\n\t\tmouse_click(0)\n\t\tkey(\"{modifiers}:up\")\n\t\t# close the mouse grid\n\t\tuser.grid_close()",
            "<user.modifiers> righty": "key(\"{modifiers}:down\")\n\t\tmouse_click(1)\n\t\tkey(\"{modifiers}:up\")\n\t\t# close the mouse grid\n\t\tuser.grid_close()",
            "(dubclick | duke)": "mouse_click()\n\t\tmouse_click()\n\t\t# close the mouse grid\n\t\tuser.grid_close()",
            "(tripclick | triplick)": "mouse_click()\n\t\tmouse_click()\n\t\tmouse_click()\n\t\t# close the mouse grid\n\t\tuser.grid_close()",
            "left drag | drag": "user.mouse_drag(0)\n\t\t# close the mouse grid\n\t\tuser.grid_close()",
            "right drag | righty drag": "user.mouse_drag(1)\n\t\t# close the mouse grid\n\t\tuser.grid_close()",
            "end drag | drag end": "user.mouse_drag_end()",
            "wheel down": "user.mouse_scroll_down()",
            "wheel down here": "user.mouse_move_center_active_window()\n\t\tuser.mouse_scroll_down()",
            "wheel tiny [down]": "user.mouse_scroll_down(0.2)",
            "wheel tiny [down] here": "user.mouse_move_center_active_window()\n\t\tuser.mouse_scroll_down(0.2)",
            "wheel downer": "user.mouse_scroll_down_continuous()",
            "wheel downer here": "user.mouse_move_center_active_window()\n\t\tuser.mouse_scroll_down_continuous()",
            "wheel up": "user.mouse_scroll_up()",
            "wheel up here": "user.mouse_move_center_active_window()\n\t\tuser.mouse_scroll_up()",
            "wheel tiny up": "user.mouse_scroll_up(0.2)",
            "wheel tiny up here": "user.mouse_move_center_active_window()\n\t\tuser.mouse_scroll_up(0.2)",
            "wheel upper": "user.mouse_scroll_up_continuous()",
            "wheel upper here": "user.mouse_move_center_active_window()\n\t\tuser.mouse_scroll_up_continuous()",
            "wheel gaze": "user.mouse_gaze_scroll()",
            "wheel gaze here": "user.mouse_move_center_active_window()\n\t\tuser.mouse_gaze_scroll()",
            "wheel stop": "user.mouse_scroll_stop()",
            "wheel stop here": "user.mouse_move_center_active_window()\n\t\tuser.mouse_scroll_stop()",
            "wheel left": "user.mouse_scroll_left()",
            "wheel left here": "user.mouse_move_center_active_window()\n\t\tuser.mouse_scroll_left()",
            "wheel tiny left": "user.mouse_scroll_left(0.5)",
            "wheel tiny left here": "user.mouse_move_center_active_window()\n\t\tuser.mouse_scroll_left(0.5)",
            "wheel right": "user.mouse_scroll_right()",
            "wheel right here": "user.mouse_move_center_active_window()\n\t\tuser.mouse_scroll_right()",
            "wheel tiny right": "user.mouse_scroll_right(0.5)",
            "wheel tiny right here": "user.mouse_move_center_active_window()\n\t\tuser.mouse_scroll_right(0.5)",
            "copy mouse position": "user.copy_mouse_position()",
            "curse no": "# Command added 2021-12-13, can remove after 2022-06-01\n\t\tapp.notify(\"Please activate the user.mouse_cursor_commands_enable tag to enable this command\")"
        }
    },
    {
        "file": "misc/mouse_cursor.talon",
        "context": "mouse cursor",
        "commands": {
            "curse yes": "user.mouse_show_cursor()",
            "curse no": "user.mouse_hide_cursor()"
        }
    },
    {
        "file": "misc/multiple_cursors.talon",
        "context": "multiple cursors",
        "commands": {
            "cursor multiple": "user.multi_cursor_enable()",
            "cursor stop": "user.multi_cursor_disable()",
            "cursor up": "user.multi_cursor_add_above()",
            "cursor down": "user.multi_cursor_add_below()",
            "cursor less": "user.multi_cursor_select_fewer_occurrences()",
            "cursor more": "user.multi_cursor_select_more_occurrences()",
            "cursor skip": "user.multi_cursor_skip_occurrence()",
            "cursor all": "user.multi_cursor_select_all_occurrences()",
            "cursor lines": "user.multi_cursor_add_to_line_ends()"
        }
    },
    {
        "file": "misc/pages.talon",
        "context": "pages",
        "commands": {
            "page next": "user.page_next()",
            "page last": "user.page_previous()",
            "go page <number>": "user.page_jump(number)",
            "go page final": "user.page_final()"
        }
    },
    {
        "file": "misc/repeater.talon",
        "context": "repeater",
        "commands": {
            "<user.ordinals>": "core.repeat_command(ordinals-1)",
            "<number_small> times": "core.repeat_command(number_small-1)",
            "(repeat that|twice)": "core.repeat_command(1)",
            "repeat that <number_small> [times]": "core.repeat_command(number_small)"
        }
    },
    {
        "file": "misc/screens.talon",
        "context": "screens",
        "commands": {
            "screen numbers": "user.screens_show_numbering()"
        }
    },
    {
        "file": "misc/screenshot.talon",
        "context": "screenshot",
        "commands": {
            "grab screen": "user.screenshot()",
            "grab screen <number_small>": "user.screenshot(number_small)",
            "grab window": "user.screenshot_window()",
            "grab selection": "user.screenshot_selection()",
            "grab settings": "user.screenshot_settings()",
            "grab screen clip": "user.screenshot_clipboard()",
            "grab screen <number_small> clip": "user.screenshot_clipboard(number_small)",
            "grab window clip": "user.screenshot_window_clipboard()"
        }
    },
    {
        "file": "misc/splits.talon",
        "context": "splits",
        "commands": {
            "split right": "user.split_window_right()",
            "split left": "user.split_window_left()",
            "split down": "user.split_window_down()",
            "split up": "user.split_window_up()",
            "split (vertically | vertical)": "user.split_window_vertically()",
            "split (horizontally | horizontal)": "user.split_window_horizontally()",
            "split flip": "user.split_flip()",
            "split window": "user.split_window()",
            "split clear": "user.split_clear()",
            "split clear all": "user.split_clear_all()",
            "split next": "user.split_next()",
            "split last": "user.split_last()",
            "go split <number>": "user.split_number(number)"
        }
    },
    {
        "file": "misc/standard.talon",
        "context": "standard",
        "commands": {
            "zoom in": "edit.zoom_in()",
            "zoom out": "edit.zoom_out()",
            "zoom reset": "edit.zoom_reset()",
            "scroll up": "edit.page_up()",
            "scroll down": "edit.page_down()",
            "copy that": "edit.copy()",
            "cut that": "edit.cut()",
            "paste that": "edit.paste()",
            "undo that": "edit.undo()",
            "redo that": "edit.redo()",
            "paste match": "edit.paste_match_style()",
            "file save": "edit.save()",
            "wipe": "key(backspace)",
            "(pad | padding)": "insert(\"  \")\n\t\tkey(left)",
            "slap": "edit.line_insert_down()"
        }
    },
    {
        "file": "misc/tabs.talon",
        "context": "tabs",
        "commands": {
            "tab (open | new)": "app.tab_open()",
            "tab (last | previous)": "app.tab_previous()",
            "tab next": "app.tab_next()",
            "tab close": "user.tab_close_wrapper()",
            "tab (reopen|restore)": "app.tab_reopen()",
            "go tab <number>": "user.tab_jump(number)",
            "go tab final": "user.tab_final()",
            "tab duplicate": "user.tab_duplicate()"
        }
    },
    {
        "file": "misc/talon_helpers.talon",
        "context": "talon helpers",
        "commands": {
            "talon check updates": "menu.check_for_updates()",
            "talon open log": "menu.open_log()",
            "talon open rebel": "menu.open_repl()",
            "talon home": "menu.open_talon_home()",
            "talon copy context pie": "user.talon_add_context_clipboard_python()",
            "talon copy context": "user.talon_add_context_clipboard()",
            "talon copy name": "name = app.name()\n\t\tclip.set_text(name)",
            "talon copy executable": "executable = app.executable()\n\t\tclip.set_text(executable)",
            "talon copy bundle": "bundle = app.bundle()\n\t\tclip.set_text(bundle)",
            "talon copy title": "title = win.title()\n\t\tclip.set_text(title)",
            "talon dump version": "result = user.talon_version_info()\n\t\tprint(result)",
            "talon insert version": "result = user.talon_version_info()\n\t\tuser.paste(result)",
            "talon dump context": "result = user.talon_get_active_context()\n\t\tprint(result)",
            "talon test last": "phrase = user.history_get(1)\n\t\tuser.talon_sim_phrase(phrase)",
            "talon test numb <number_small>": "phrase = user.history_get(number_small)\n\t\tuser.talon_sim_phrase(phrase)",
            "talon test <phrase>": "user.talon_sim_phrase(phrase)",
            "talon debug action {user.talon_actions}": "user.talon_action_find(\"{user.talon_actions}\")",
            "talon debug list {user.talon_lists}": "user.talon_debug_list(talon_lists)",
            "talon copy list {user.talon_lists}": "user.talon_copy_list(talon_lists)",
            "talon debug tags": "user.talon_debug_tags()",
            "talon debug modes": "user.talon_debug_modes()",
            "talon debug scope {user.talon_scopes}": "user.talon_debug_scope(talon_scopes)",
            "talon debug setting {user.talon_settings}": "user.talon_debug_setting(talon_settings)",
            "talon debug all settings": "user.talon_debug_all_settings()",
            "talon debug active app": "result = user.talon_get_active_application_info()\n\t\tprint(\"**** Dumping active application **** \")\n\t\tprint(result)\n\t\tprint(\"***********************\")",
            "talon copy active app": "result = user.talon_get_active_application_info()\n\t\tclip.set_text(result)"
        }
    },
    {
        "file": "misc/websites_and_search_engines.talon",
        "context": "websites and search engines",
        "commands": {
            "open {user.website}": "user.open_url(website)",
            "{user.search_engine} hunt <user.text>": "user.search_with_search_engine(search_engine, user.text)",
            "{user.search_engine} (that|this)": "text = edit.selected_text()\n\t\tuser.search_with_search_engine(search_engine, text)"
        }
    },
    {
        "file": "misc/window_management.talon",
        "context": "window management",
        "commands": {
            "window (new|open)": "app.window_open()",
            "window next": "app.window_next()",
            "window last": "app.window_previous()",
            "window close": "app.window_close()",
            "focus <user.running_applications>": "user.switcher_focus(running_applications)",
            "focus": "user.switcher_menu()",
            "running list": "user.switcher_toggle_running()",
            "running close": "user.switcher_hide_running()",
            "launch <user.launch_applications>": "user.switcher_launch(launch_applications)",
            "snap <user.window_snap_position>": "user.snap_window(window_snap_position)",
            "snap next [screen]": "user.move_window_next_screen()",
            "snap last [screen]": "user.move_window_previous_screen()",
            "snap screen <number>": "user.move_window_to_screen(number)",
            "snap <user.running_applications> <user.window_snap_position>": "user.snap_app(running_applications, window_snap_position)",
            "snap <user.running_applications> [screen] <number>": "user.move_app_to_screen(running_applications, number)"
        }
    },
    {
        "file": "modes/dictation_mode.talon",
        "context": "dictation mode",
        "commands": {
            "press <user.modifiers>": "key(modifiers)",
            "press <user.keys>": "key(keys)",
            "<user.raw_prose>": "auto_insert(raw_prose)",
            "cap": "user.dictation_format_cap()",
            "(no cap | no-caps)": "user.dictation_format_no_cap()",
            "(no space | no-space)": "user.dictation_format_no_space()",
            "cap that": "user.dictation_reformat_cap()",
            "(no cap | no-caps) that": "user.dictation_reformat_no_cap()",
            "(no space | no-space) that": "user.dictation_reformat_no_space()",
            "go up <number_small> (line|lines)": "edit.up()\n\t\trepeat(number_small - 1)",
            "go down <number_small> (line|lines)": "edit.down()\n\t\trepeat(number_small - 1)",
            "go left <number_small> (word|words)": "edit.word_left()\n\t\trepeat(number_small - 1)",
            "go right <number_small> (word|words)": "edit.word_right()\n\t\trepeat(number_small - 1)",
            "go line start": "edit.line_start()",
            "go line end": "edit.line_end()",
            "select left <number_small> (word|words)": "edit.extend_word_left()\n\t\trepeat(number_small - 1)",
            "select right <number_small> (word|words)": "edit.extend_word_right()\n\t\trepeat(number_small - 1)",
            "select left <number_small> (character|characters)": "edit.extend_left()\n\t\trepeat(number_small - 1)",
            "select right <number_small> (character|characters)": "edit.extend_right()\n\t\trepeat(number_small - 1)",
            "clear left <number_small> (word|words)": "edit.extend_word_left()\n\t\trepeat(number_small - 1)\n\t\tedit.delete()",
            "clear right <number_small> (word|words)": "edit.extend_word_right()\n\t\trepeat(number_small - 1)\n\t\tedit.delete()",
            "clear left <number_small> (character|characters)": "edit.extend_left()\n\t\trepeat(number_small - 1)\n\t\tedit.delete()",
            "clear right <number_small> (character|characters)": "edit.extend_right()\n\t\trepeat(number_small - 1)\n\t\tedit.delete()\n\t\t\n\t\t# Formatting",
            "formatted <user.format_text>": "user.dictation_insert_raw(format_text)",
            "format selection <user.formatters>": "user.formatters_reformat_selection(formatters)\n\t\t\n\t\t# Corrections",
            "scratch that": "user.clear_last_phrase()",
            "scratch selection": "edit.delete()",
            "select that": "user.select_last_phrase()",
            "spell that <user.letters>": "auto_insert(letters)",
            "spell that <user.formatters> <user.letters>": "result = user.formatted_text(letters, formatters)\n\t\tuser.dictation_insert_raw(result)\n\t\t\n\t\t# Escape, type things that would otherwise be commands",
            "escape <user.text>": "auto_insert(user.text)"
        }
    },
    {
        "file": "modes/dragon_modes.talon",
        "context": "dragon modes",
        "commands": {
            "dragon mode": "user.dragon_mode()",
            "talon mode": "user.talon_mode()"
        }
    },
    {
        "file": "modes/language_modes.talon",
        "context": "language modes",
        "commands": {
            "force see sharp": "user.code_set_language_mode(\"csharp\")",
            "force see plus plus": "user.code_set_language_mode(\"cplusplus\")",
            "force go (lang|language)": "user.code_set_language_mode(\"go\")",
            "force java": "user.code_set_language_mode(\"java\")",
            "force java script": "user.code_set_language_mode(\"javascript\")",
            "force type script": "user.code_set_language_mode(\"typescript\")",
            "force markdown": "user.code_set_language_mode(\"markdown\")",
            "force python": "user.code_set_language_mode(\"python\")",
            "force terraform": "user.code_set_language_mode(\"terraform\")",
            "force are language": "user.code_set_language_mode(\"r\")",
            "force rust": "user.code_set_language_mode(\"rust\")",
            "force talon [language]": "user.code_set_language_mode(\"talon\")",
            "force scala": "user.code_set_language_mode(\"scala\")",
            "clear language modes": "user.code_clear_language_mode()",
            "[enable] debug mode": "mode.enable(\"user.gdb\")",
            "disable debug mode": "mode.disable(\"user.gdb\")"
        }
    },
    {
        "file": "modes/modes.talon",
        "context": "modes",
        "commands": {
            "dictation mode": "mode.disable(\"sleep\")\n\t\tmode.disable(\"command\")\n\t\tmode.enable(\"dictation\")\n\t\tuser.code_clear_language_mode()\n\t\tmode.disable(\"user.gdb\")",
            "command mode": "mode.disable(\"sleep\")\n\t\tmode.disable(\"dictation\")\n\t\tmode.enable(\"command\")"
        }
    },
    {
        "file": "modes/sleep_mode_wav2letter.talon",
        "context": "sleep mode wav2letter",
        "commands": {
            "<phrase>": "skip()"
        }
    },
    {
        "file": "modes/wake_up.talon",
        "context": "wake up",
        "commands": {
            "welcome back": "user.mouse_wake()\n\t\tuser.history_enable()\n\t\tuser.talon_mode()",
            "sleep all [<phrase>]": "user.switcher_hide_running()\n\t\tuser.history_disable()\n\t\tuser.homophones_hide()\n\t\tuser.help_hide()\n\t\tuser.mouse_sleep()\n\t\tspeech.disable()\n\t\tuser.engine_sleep()",
            "talon sleep [<phrase>]": "speech.disable()",
            "talon wake": "speech.enable()"
        }
    },
    {
        "file": "mouse_grid/mouse_grid.talon",
        "context": "mouse grid",
        "commands": {
            "M grid": "app.notify(\"please use the voice command 'mouse grid' instead of 'm grid'\")\n\t\tuser.grid_select_screen(1)\n\t\tuser.grid_activate()"
        }
    },
    {
        "file": "mouse_grid/mouse_grid_always.talon",
        "context": "mouse grid always",
        "commands": {
            "mouse grid": "user.grid_select_screen(1)\n\t\tuser.grid_activate()\n\t\t",
            "grid win": "user.grid_place_window()\n\t\tuser.grid_activate()\n\t\t",
            "grid <user.number_key>+": "user.grid_activate()\n\t\tuser.grid_narrow_list(number_key_list)\n\t\t",
            "grid screen [<number>]": "user.grid_select_screen(number or 1)\n\t\tuser.grid_activate()"
        }
    },
    {
        "file": "mouse_grid/mouse_grid_open.talon",
        "context": "mouse grid open",
        "commands": {
            "<user.number_key>": "user.grid_narrow(number_key)",
            "grid off": "user.grid_close()\n\t\t",
            "grid reset": "user.grid_reset()\n\t\t",
            "grid back": "user.grid_go_back()"
        }
    },
    {
        "file": "talon_draft_window/draft_global.talon",
        "context": "draft global",
        "commands": {
            "draft show": "# Do this toggle so we can have focus when saying 'draft show'\n\t\tuser.draft_hide()\n\t\tuser.draft_show()\n\t\t",
            "draft show <user.draft_window_position>": "# Do this toggle so we can have focus when saying 'draft show'\n\t\tuser.draft_hide()\n\t\tuser.draft_show()\n\t\tuser.draft_named_move(draft_window_position)\n\t\t",
            "draft show small": "# Do this toggle so we can have focus when saying 'draft show'\n\t\tuser.draft_hide()\n\t\tuser.draft_show()\n\t\tuser.draft_resize(600, 200)\n\t\t",
            "draft show large": "# Do this toggle so we can have focus when saying 'draft show'\n\t\tuser.draft_hide()\n\t\tuser.draft_show()\n\t\tuser.draft_resize(800, 500)\n\t\t",
            "draft empty": "user.draft_show(\"\")",
            "draft edit": "text = edit.selected_text()\n\t\tkey(backspace)\n\t\tuser.draft_show(text)\n\t\t",
            "draft edit all": "edit.select_all()\n\t\ttext = edit.selected_text()\n\t\tkey(backspace)\n\t\tuser.draft_show(text)"
        }
    },
    {
        "file": "talon_draft_window/draft_window.talon",
        "context": "draft window",
        "commands": {
            "replace <user.draft_anchor> with <user.text>": "user.draft_select(\"{draft_anchor}\")\n\t\tresult = user.formatted_text(text, \"NOOP\")\n\t\tinsert(result)\n\t\t\n\t\t# Position cursor before word",
            "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")\n\t\t",
            "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")\n\t\t\n\t\t# Position cursor after word",
            "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)\n\t\t\n\t\t# Select a whole word",
            "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")\n\t\t\n\t\t# Select a range of words",
            "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")\n\t\t\n\t\t# Delete a word",
            "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\n\t\tkey(backspace)\n\t\t\n\t\t# Delete a range of words",
            "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\n\t\tkey(backspace)\n\t\t\n\t\t# reformat word",
            "<user.formatters> word <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\n\t\tuser.formatters_reformat_selection(user.formatters)\n\t\t\n\t\t# reformat range",
            "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\n\t\tuser.formatters_reformat_selection(user.formatters)"
        }
    },
    {
        "file": "talon_draft_window/draft_window_open.talon",
        "context": "draft window open",
        "commands": {
            "draft hide": "user.draft_hide()",
            "draft submit": "content = user.draft_get_text()\n\t\tuser.draft_hide()\n\t\tinsert(content)\n\t\t# user.paste may be somewhat faster, but seems to be unreliable on MacOSX, see\n\t\t# https://github.com/talonvoice/talon/issues/254#issuecomment-789355238\n\t\t# user.paste(content)"
        }
    },
    {
        "file": "text/find_and_replace.talon",
        "context": "find and replace",
        "commands": {
            "hunt this": "user.find(\"\")",
            "hunt this <user.text>": "user.find(text)",
            "hunt all": "user.find_everywhere(\"\")",
            "hunt all <user.text>": "user.find_everywhere(text)",
            "hunt case": "user.find_toggle_match_by_case()",
            "hunt word": "user.find_toggle_match_by_word()",
            "hunt expression": "user.find_toggle_match_by_regex()",
            "hunt next": "user.find_next()",
            "hunt previous": "user.find_previous()",
            "replace this [<user.text>]": "user.replace(text or \"\")",
            "replace all": "user.replace_everywhere(\"\")",
            "replace <user.text> all": "user.replace_everywhere(text)",
            "replace confirm that": "user.replace_confirm()",
            "replace confirm all": "user.replace_confirm_all()",
            "clear last <user.text> [over]": "user.select_previous_occurrence(text)\n\t\tsleep(100ms)\n\t\tedit.delete()",
            "clear next <user.text> [over]": "user.select_next_occurrence(text)\n\t\tsleep(100ms)\n\t\tedit.delete()",
            "clear last clip": "user.select_previous_occurrence(clip.text())\n\t\tedit.delete()",
            "clear next clip": "user.select_next_occurrence(clip.text())\n\t\tsleep(100ms)\n\t\tedit.delete()",
            "comment last <user.text> [over]": "user.select_previous_occurrence(text)\n\t\tsleep(100ms)\n\t\tcode.toggle_comment()",
            "comment last clip": "user.select_previous_occurrence(clip.text())\n\t\tsleep(100ms)\n\t\tcode.toggle_comment()",
            "comment next <user.text> [over]": "user.select_next_occurrence(text)\n\t\tsleep(100ms)\n\t\tcode.toggle_comment()",
            "comment next clip": "user.select_next_occurrence(clip.text())\n\t\tsleep(100ms)\n\t\tcode.toggle_comment()",
            "go last <user.text> [over]": "user.select_previous_occurrence(text)\n\t\tsleep(100ms)\n\t\tedit.right()",
            "go last clip": "user.select_previous_occurrence(clip.text())\n\t\tsleep(100ms)\n\t\tedit.right()",
            "go next <user.text> [over]": "user.select_next_occurrence(text)\n\t\tedit.right()",
            "go next clip": "user.select_next_occurrence(clip.text())\n\t\tedit.right()",
            "paste last <user.text> [over]": "user.select_previous_occurrence(text)\n\t\tsleep(100ms)\n\t\tedit.right()\n\t\tedit.paste()",
            "paste next <user.text> [over]": "user.select_next_occurrence(text)\n\t\tsleep(100ms)\n\t\tedit.right()\n\t\tedit.paste()",
            "replace last <user.text> [over]": "user.select_previous_occurrence(text)\n\t\tsleep(100ms)\n\t\tedit.paste()",
            "replace next <user.text> [over]": "user.select_next_occurrence(text)\n\t\tsleep(100ms)\n\t\tedit.paste()",
            "select last <user.text> [over]": "user.select_previous_occurrence(text)",
            "select next <user.text> [over]": "user.select_next_occurrence(text)",
            "select last clip": "user.select_previous_occurrence(clip.text())",
            "select next clip": "user.select_next_occurrence(clip.text())"
        }
    },
    {
        "file": "text/generic_editor.talon",
        "context": "generic editor",
        "commands": {
            "find it": "edit.find()\n\t\t",
            "next one": "edit.find_next()\n\t\t",
            "go word left": "edit.word_left()\n\t\t",
            "go word right": "edit.word_right()\n\t\t",
            "go left": "edit.left()\n\t\t",
            "go right": "edit.right()\n\t\t",
            "go up": "edit.up()\n\t\t",
            "go down": "edit.down()\n\t\t",
            "go line start": "edit.line_start()\n\t\t",
            "go line end": "edit.line_end()\n\t\t",
            "go way left": "edit.line_start()\n\t\tedit.line_start()\n\t\t",
            "go way right": "edit.line_end()\n\t\t",
            "go way down": "edit.file_end()\n\t\t",
            "go way up": "edit.file_start()\n\t\t",
            "go bottom": "edit.file_end()\n\t\t",
            "go top": "edit.file_start()\n\t\t",
            "go page down": "edit.page_down()\n\t\t",
            "go page up": "edit.page_up()\n\t\t\n\t\t# selecting",
            "select line": "edit.select_line()\n\t\t",
            "select all": "edit.select_all()\n\t\t",
            "select left": "edit.extend_left()\n\t\t",
            "select right": "edit.extend_right()\n\t\t",
            "select up": "edit.extend_line_up()\n\t\t",
            "select down": "edit.extend_line_down()\n\t\t",
            "select word": "edit.select_word()\n\t\t",
            "select word left": "edit.extend_word_left()\n\t\t",
            "select word right": "edit.extend_word_right()\n\t\t",
            "select way left": "edit.extend_line_start()\n\t\t",
            "select way right": "edit.extend_line_end()\n\t\t",
            "select way up": "edit.extend_file_start()\n\t\t",
            "select way down": "edit.extend_file_end()\n\t\t\n\t\t# editing",
            "indent [more]": "edit.indent_more()\n\t\t",
            "(indent less | out dent)": "edit.indent_less()\n\t\t\n\t\t# deleting",
            "clear line": "edit.delete_line()\n\t\t",
            "clear left": "key(backspace)\n\t\t",
            "clear right": "key(delete)\n\t\t",
            "clear up": "edit.extend_line_up()\n\t\tedit.delete()\n\t\t",
            "clear down": "edit.extend_line_down()\n\t\tedit.delete()\n\t\t",
            "clear word": "edit.delete_word()\n\t\t",
            "clear word left": "edit.extend_word_left()\n\t\tedit.delete()\n\t\t",
            "clear word right": "edit.extend_word_right()\n\t\tedit.delete()\n\t\t",
            "clear way left": "edit.extend_line_start()\n\t\tedit.delete()\n\t\t",
            "clear way right": "edit.extend_line_end()\n\t\tedit.delete()\n\t\t",
            "clear way up": "edit.extend_file_start()\n\t\tedit.delete()\n\t\t",
            "clear way down": "edit.extend_file_end()\n\t\tedit.delete()\n\t\t",
            "clear all": "edit.select_all()\n\t\tedit.delete()\n\t\t\n\t\t#copy commands",
            "copy all": "edit.select_all()\n\t\tedit.copy()\n\t\t#to do: do we want these variants, seem to conflict\n\t\t# copy left:\n\t\t#      edit.extend_left()\n\t\t#      edit.copy()\n\t\t# copy right:\n\t\t#     edit.extend_right()\n\t\t#     edit.copy()\n\t\t# copy up:\n\t\t#     edit.extend_up()\n\t\t#     edit.copy()\n\t\t# copy down:\n\t\t#     edit.extend_down()\n\t\t#     edit.copy()\n\t\t",
            "copy word": "edit.select_word()\n\t\tedit.copy()\n\t\t",
            "copy word left": "edit.extend_word_left()\n\t\tedit.copy()\n\t\t",
            "copy word right": "edit.extend_word_right()\n\t\tedit.copy()\n\t\t",
            "copy line": "edit.select_line()\n\t\tedit.copy()\n\t\t\n\t\t#cut commands",
            "cut all": "edit.select_all()\n\t\tedit.cut()\n\t\t#to do: do we want these variants\n\t\t# cut left:\n\t\t#      edit.select_all()\n\t\t#      edit.cut()\n\t\t# cut right:\n\t\t#      edit.select_all()\n\t\t#      edit.cut()\n\t\t# cut up:\n\t\t#      edit.select_all()\n\t\t#     edit.cut()\n\t\t# cut down:\n\t\t#     edit.select_all()\n\t\t#     edit.cut()\n\t\t",
            "cut word": "edit.select_word()\n\t\tedit.cut()\n\t\t",
            "cut word left": "edit.extend_word_left()\n\t\tedit.cut()\n\t\t",
            "cut word right": "edit.extend_word_right()\n\t\tedit.cut()\n\t\t",
            "cut line": "edit.select_line()\n\t\tedit.cut()\n\t\t"
        }
    },
    {
        "file": "text/homophones.talon",
        "context": "homophones",
        "commands": {
            "phones <user.homophones_canonical>": "user.homophones_show(homophones_canonical)",
            "phones that": "user.homophones_show_selection()",
            "phones force <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
            "phones force": "user.homophones_force_show_selection()",
            "phones hide": "user.homophones_hide()",
            "phones word": "edit.select_word()\n\t\tuser.homophones_show_selection()",
            "phones [<user.ordinals>] word left": "n = ordinals or 1\n\t\tuser.words_left(n - 1)\n\t\tedit.extend_word_left()\n\t\tuser.homophones_show_selection()",
            "phones [<user.ordinals>] word right": "n = ordinals or 1\n\t\tuser.words_right(n - 1)\n\t\tedit.extend_word_right()\n\t\tuser.homophones_show_selection()"
        }
    },
    {
        "file": "text/homophones_open.talon",
        "context": "homophones open",
        "commands": {
            "choose <number_small>": "result = user.homophones_select(number_small)\n\t\tinsert(result)\n\t\tuser.homophones_hide()",
            "choose <user.formatters> <number_small>": "result = user.homophones_select(number_small)\n\t\tinsert(user.formatted_text(result, formatters))\n\t\tuser.homophones_hide()"
        }
    },
    {
        "file": "text/line_commands.talon",
        "context": "line commands",
        "commands": {
            "lend": "edit.line_end()",
            "bend": "edit.line_start()",
            "go <number>": "edit.jump_line(number)",
            "go <number> end": "edit.jump_line(number)\n\t\tedit.line_end()",
            "comment [line] <number>": "user.select_range(number, number)\n\t\tcode.toggle_comment()",
            "comment <number> until <number>": "user.select_range(number_1, number_2)\n\t\tcode.toggle_comment()",
            "clear [line] <number>": "edit.jump_line(number)\n\t\tuser.select_range(number, number)\n\t\tedit.delete()",
            "clear <number> until <number>": "user.select_range(number_1, number_2)\n\t\tedit.delete()",
            "copy [line] <number>": "user.select_range(number, number)\n\t\tedit.copy()",
            "copy <number> until <number>": "user.select_range(number_1, number_2)\n\t\tedit.copy()",
            "cut [line] <number>": "user.select_range(number, number)\n\t\tedit.cut()",
            "cut [line] <number> until <number>": "user.select_range(number_1, number_2)\n\t\tedit.cut()",
            "(paste | replace) <number> until <number>": "user.select_range(number_1, number_2)\n\t\tedit.paste()",
            "(select | cell | sell) [line] <number>": "user.select_range(number, number)",
            "(select | cell | sell) <number> until <number>": "user.select_range(number_1, number_2)",
            "tab that": "edit.indent_more()",
            "tab [line] <number>": "edit.jump_line(number)\n\t\tedit.indent_more()",
            "tab <number> until <number>": "user.select_range(number_1, number_2)\n\t\tedit.indent_more()",
            "retab that": "edit.indent_less()",
            "retab [line] <number>": "user.select_range(number, number)\n\t\tedit.indent_less()",
            "retab <number> until <number>": "user.select_range(number_1, number_2)\n\t\tedit.indent_less()",
            "drag [line] down": "edit.line_swap_down()",
            "drag [line] up": "edit.line_swap_up()",
            "drag up [line] <number>": "user.select_range(number, number)\n\t\tedit.line_swap_up()",
            "drag up <number> until <number>": "user.select_range(number_1, number_2)\n\t\tedit.line_swap_up()",
            "drag down [line] <number>": "user.select_range(number, number)\n\t\tedit.line_swap_down()",
            "drag down <number> until <number>": "user.select_range(number_1, number_2)\n\t\tedit.line_swap_down()",
            "clone (line|that)": "edit.line_clone()",
            "select camel left": "user.extend_camel_left()",
            "select camel right": "user.extend_camel_right()",
            "go camel left": "user.camel_left()",
            "go camel right": "user.camel_right()"
        }
    },
    {
        "file": "text/numbers.talon",
        "context": "numbers",
        "commands": {
            "<user.number_string>": "\"{number_string}\""
        }
    },
    {
        "file": "text/symbols.talon",
        "context": "symbols",
        "commands": {
            "question [mark]": "\"?\"",
            "(downscore | underscore)": "\"_\"",
            "double dash": "\"--\"",
            "(bracket | brack | left bracket)": "\"{\"",
            "(rbrack | are bracket | right bracket)": "\"}\"",
            "triple quote": "\"'''\"",
            "(triple grave | triple back tick | gravy)": "insert(\"```\")",
            "(dot dot | dotdot)": "\"..\"",
            "ellipses": "\"...\"",
            "(comma and | spamma)": "\", \"",
            "plus": "\"+\"",
            "arrow": "\"->\"",
            "dub arrow": "\"=>\"",
            "new line": "\"\\\\n\"",
            "carriage return": "\"\\\\r\"",
            "line feed": "\"\\\\r\\\\n\"",
            "empty dubstring": "'\"\"'\n\t\tkey(left)",
            "empty escaped (dubstring|dub quotes)": "'\\\\\"\\\\\"'\n\t\tkey(left)\n\t\tkey(left)",
            "empty string": "\"''\"\n\t\tkey(left)",
            "empty escaped string": "\"\\\\'\\\\'\"\n\t\tkey(left)\n\t\tkey(left)",
            "(inside parens | args)": "insert(\"()\")\n\t\tkey(left)",
            "inside (squares | square brackets | list)": "insert(\"[]\")\n\t\tkey(left)",
            "inside (bracket | braces)": "insert(\"{}\")\n\t\tkey(left)",
            "inside percent": "insert(\"%%\")\n\t\tkey(left)",
            "inside (quotes | string)": "insert(\"''\")\n\t\tkey(left)",
            "inside (double quotes | dubquotes)": "insert('\"\"')\n\t\tkey(left)",
            "inside (graves | back ticks)": "insert(\"``\")\n\t\tkey(left)",
            "angle that": "text = edit.selected_text()\n\t\tuser.paste(\"<{text}>\")",
            "(square | square bracket) that": "text = edit.selected_text()\n\t\tuser.paste(\"[{text}]\")",
            "(bracket | brace) that": "text = edit.selected_text()\n\t\tuser.paste(\"{{{text}}}\")",
            "(parens | args) that": "text = edit.selected_text()\n\t\tuser.paste(\"({text})\")",
            "percent that": "text = edit.selected_text()\n\t\tuser.paste(\"%{text}%\")",
            "quote that": "text = edit.selected_text()\n\t\tuser.paste(\"'{text}'\")",
            "(double quote | dubquote) that": "text = edit.selected_text()\n\t\tuser.paste('\"{text}\"')",
            "(grave | back tick) that": "text = edit.selected_text()\n\t\tuser.paste('`{text}`')"
        }
    },
    {
        "file": "text/text_navigation.talon",
        "context": "text navigation",
        "commands": {
            "navigate [{user.arrow_key}] [{user.navigation_action}] [{user.navigation_target_name}] [{user.before_or_after}] [<user.ordinals>] <user.navigation_target>": "## If you use this command a lot, you may wish to have a shorter syntax that omits the navigate keyword. Note that you then at least have to say either a navigation_action or before_or_after:\n\t\t#({user.navigation_action} [{user.arrow_key}] [{user.navigation_target_name}] [{user.before_or_after}] | [{user.arrow_key}] {user.before_or_after}) [<user.ordinals>] <user.navigation_target>:\n\t\tuser.navigation(navigation_action or \"GO\", arrow_key or \"RIGHT\", navigation_target_name or \"DEFAULT\", before_or_after or \"DEFAULT\", navigation_target, ordinals or 1)\n\t\t\n\t\t# ===== Examples of use =====\n\t\t#\n\t\t#   navigate comma: moves after the next \",\" on the line.\n\t\t#   navigate before five: moves before the next \"5\" on the line.\n\t\t#   navigate left underscore: moves before the previous \"_\" on the line.\n\t\t#   navigate left after second plex: moves after the second-previous \"x\" on the line.\n\t\t#\n\t\t# Besides characters, we can find phrases or move in predetermined units:\n\t\t#\n\t\t#   navigate phrase hello world: moves after the next \"hello world\" on the line.\n\t\t#   navigate left third word: moves left over three words.\n\t\t#   navigate before second big: moves before the second-next 'big' word (a chunk of anything except white space).\n\t\t#   navigate left second small: moves left over two 'small' words (chunks of a camelCase name).\n\t\t#\n\t\t# We can search several lines (default 10) above or below the cursor:\n\t\t#\n\t\t#   navigate up phrase john: moves before the previous \"john\" (case-insensitive) on the preceding lines.\n\t\t#   navigate down third period: moves after the third period on the following lines.\n\t\t#\n\t\t# Besides movement, we can cut, copy, select, clear (delete), or extend the current selection:\n\t\t#\n\t\t#   navigate cut after comma: cut the word following the next comma on the line.\n\t\t#   navigate left copy third word: copy the third word to the left.\n\t\t#   navigate extend third big: extend the selection three big words right.\n\t\t#   navigate down clear phrase I think: delete the next occurrence of \"I think\" on the following lines.\n\t\t#   navigate up select colon: select the closest colon on the preceeding lines.\n\t\t#\n\t\t# We can specify what gets selected before or after the given input:\n\t\t#\n\t\t#\tnavigate select parens after equals: Select the first \"(\" and everything until the first \")\" after the \"=\"\n\t\t#\tnavigate left copy all before equals: Copy everything from the start of the line until the first \"=\" you encounter while moving left\n\t\t#\tnavigate clear constant before semicolon: Delete the last word consisting of only uppercase characters or underscores before a \";\"\n\t\t#\n\t\t# ===== Explanation of the grammar =====\n\t\t#\n\t\t# [{user.arrow_key}]: left, right, up, down (default: right)\n\t\t#   Which direction to navigate in.\n\t\t#   left/right work on the current line.\n\t\t#   up/down work on the closest lines (default: 10) above or below.\n\t\t#\n\t\t# [{user.navigation_action}]: move, extend, select, clear, cut, copy (default: move)\n\t\t#   What action to perform.\n\t\t#\n\t\t# [{user.navigation_target_name}]: word, small, big, parens, squares, braces, quotes, angles, all, method, constant (default: word)\n\t\t#\tThe predetermined unit to select if before_or_after was specified.\n\t\t#\tDefaults to \"word\"\n\t\t#\n\t\t# [{user.before_or_after}]: before, after (default: special behavior)\n\t\t#   For move/extend: where to leave the cursor, before or after the target.\n\t\t#   Defaults to \"after\" for right/down and \"before\" for left/up.\n\t\t#\n\t\t#   For select/copy/cut: if absent, select/copy/cut the target iself. If\n\t\t#   present, the navigation_target_name before/after the target.\n\t\t#\n\t\t# [<user.ordinals>]: an english ordinal, like \"second\" (default: first)\n\t\t#   Which occurrence of the target to navigate to.\n\t\t#\n\t\t# <user.navigation_target>: one of the following:\n\t\t#   - a character name, like \"comma\" or \"five\".\n\t\t#   - \"word\" or \"big\" or \"small\"\n\t\t#   - \"phrase <some text to search for>\"\n\t\t#   Specifies the target to search for/navigate to.\n\t\t\n\t\t# The functionality for all these commands is covered in the lines above, but these commands are kept here for convenience. Originally from word_selection.talon.",
            "word neck [<number_small>]": "user.navigation_by_name(\"SELECT\", \"RIGHT\", \"DEFAULT\", \"word\", number_small or 1)",
            "word pre [<number_small>]": "user.navigation_by_name(\"SELECT\", \"LEFT\", \"DEFAULT\", \"word\", number_small or 1)",
            "small word neck [<number_small>]": "user.navigation_by_name(\"SELECT\", \"RIGHT\", \"DEFAULT\", \"small\", number_small or 1)",
            "small word pre [<number_small>]": "user.navigation_by_name(\"SELECT\", \"LEFT\", \"DEFAULT\", \"small\", number_small or 1)",
            "big word neck [<number_small>]": "user.navigation_by_name(\"SELECT\", \"RIGHT\", \"DEFAULT\", \"big\", number_small or 1)",
            "big word pre [<number_small>]": "user.navigation_by_name(\"SELECT\", \"LEFT\", \"DEFAULT\", \"big\", number_small or 1)"
        }
    }
]